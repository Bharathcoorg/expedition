{"version":3,"sources":["components/AddressView/AddressView.tsx","components/AddressView/index.ts","helpers.tsx","contexts/ERPCContext.ts","containers/Address.tsx","components/TxList/TxList.tsx","components/TxList/index.ts","components/BlockView/BlockView.tsx","components/BlockView/index.ts","containers/Block.tsx","components/formatters.ts","components/HashChart/index.ts","components/HashChart/HashChart.tsx","components/HashRate/index.ts","components/HashRate/HashRate.tsx","components/BlockList/BlockList.tsx","components/BlockList/index.ts","containers/BlockList.tsx","containers/Dashboard.tsx","containers/NodeView.tsx","components/TxView/TxView.tsx","components/TxView/index.ts","containers/Transaction.tsx","containers/ConfigurationMenu/ConfigurationMenu.tsx","containers/ConfigurationMenu/index.ts","themes/jadeTheme.ts","hooks/useMultiGeth.ts","hooks/useServiceRunner.ts","App.tsx","index.tsx"],"names":["AddressView","props","react","address","balance","txCount","code","value","renderGeneral","useBlockNumber","erpc","_React$useState","React","_React$useState2","Object","slicedToArray","blockNumber","setBlockNumber","eth_blockNumber","then","bn","parseInt","useInterval","getBlocks","from","to","promises","i","push","eth_getBlockByNumber","concat","toString","Promise","all","undefined","unit","require","Address","_ref","match","params","ERPCContext","_useBlockNumber","transactionCount","setTransactionCount","_React$useState3","_React$useState4","setBalance","_React$useState5","_React$useState6","setCode","hexBlockNumber","eth_getTransactionCount","eth_getBalance","eth_getCode","CircularProgress","components_AddressView","fromWei","TxListItem","tx","TableRow","TableCell","Link_Link","component","_ref2","className","children","Link","hash","_ref3","_ref4","transactionIndex","TxList","Table","TableHead","TableBody","transactions","map","key","BlockView","block","timestamp","parentHash","miner","nonce","difficulty","extraData","stateRoot","transactionsRoot","receiptsRoot","number","Date","components_TxList","Block","setBlock","eth_getBlockByHash","components_BlockView","hashesToGH","hashes","dividedBy","toNumber","toFixed","HashChart","title","data","width","height","victory_chart","name","theme","VictoryTheme","material","victory_label","x","y","text","victory_line","HashRate","blockTime","BigNumber","rightPaddingFix","paddingRight","BlockList","blocks","sortedBlocks","sort","a","b","Typography","scope","style","toISOString","length","BlockListContainer","setBlocks","components_BlockList","useState","config","blockMapGasUsed","gasUsed","blockMapUncles","uncles","blockMapHashRate","blockMapTransactionCount","Dashboard","wei","styles","topItems","display","justifyContent","alignItems","_useState","_useState2","chainId","setChainId","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","gasPrice","setGasPrice","_useState9","_useState10","syncing","setSyncing","_useState11","_useState12","peerCount","setPeerCount","eth_chainId","Math","max","bl","eth_syncing","net_peerCount","eth_gasPrice","Grid","container","spacing","item","xs","variant","currentBlock","highestBlock","components_HashRate","hashRate","sm","lg","components_HashChart","victory_bar","Button","href","NodeView","TxView","receipt","blockHash","gas","input","replayProtected","v","r","s","transactionHash","cumulativeGasUsed","_ref5","_ref6","contractAddress","status","logs","renderTxTable","TransactionContainer","transaction","setTransaction","setReceipt","eth_getTransactionByHash","eth_getTransactionReceipt","components_TxView","PagedMenu","selected","setSelected","MenuItem","onClick","ListItemIcon","NavigateBefore","ListItemText","Input","onChange","e","currentTarget","placeholder","service-runner","ethereum-rpc","fullWidth","ListItemSecondaryAction","NavigateNext","ConfigurationMenu","anchorEl","setAnchorEl","open","IconButton","aria-label","aria-controls","aria-haspopup","event","color","Settings","Menu","id","getContentAnchorEl","keepMounted","PaperProps","anchorOrigin","vertical","horizontal","transformOrigin","onClose","ConfigurationMenu_PagedMenu","lightTheme","createMuiTheme","overrides","MuiAppBar","root","background","palette","default","darkTheme","type","paper","MuiTable","MuiTypography","serviceName","useMultiGeth","serviceRunner","serviceRunnerUrl","version","env","setErpc","asyncToGenerator","regenerator_default","mark","_callee","parsedUrl","rpc","protocol","fallbackPort","port","wrap","_context","prev","next","installService","sent","abrupt","startService","URL","t0","split","ERPC","transport","host","hostname","path","pathname","t1","stop","apply","this","arguments","runAsync","useServiceRunner","defaultUrl","url","setUrl","setServiceRunner","JadeServiceRunner","useStyles","makeStyles","flexGrow","App","darkMode","useDarkMode","_useServiceRunner","_useServiceRunner2","setServiceRunnerUrl","_useMultiGeth","classes","startBatch","stopBatch","Provider","ThemeProvider","CssBaseline","AppBar","position","elevation","Toolbar","toggle","Brightness3_default","WbSunny_default","containers_ConfigurationMenu","margin","BrowserRouter","Switch","Route","exact","Transaction","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9448bb8c.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport interface IAddressViewProps {\n  address: string;\n  balance: string;\n  txCount: number;\n  code: string;\n}\n\nfunction renderGeneral(props: IAddressViewProps) {\n  const { address, balance, txCount, code } = props;\n  return (\n    <div>\n      <div>Balance: {balance}</div>\n      <div>Tx count: {txCount}</div>\n      <div>{address}</div>\n      <div>Code</div>\n      <div>\n        <textarea value={code} />\n      </div>\n    </div>\n  );\n}\n\nfunction AddressView(props: IAddressViewProps) {\n  return (\n    <React.Fragment>\n        {renderGeneral(props)}\n    </React.Fragment>\n  );\n}\n\nexport default AddressView;\n","import AddressView from \"./AddressView\";\nexport default AddressView;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport * as React from \"react\";\nimport useInterval from \"use-interval\";\n\nexport const getBlocks = (from: number, to: number, erpc: ERPC): Promise<any> => {\n  const promises: any[] = [];\n  for (let i = from; i < to; i++) {\n    promises.push(erpc.eth_getBlockByNumber(`0x${i.toString(16)}`, true));\n  }\n  return Promise.all(promises);\n};\n\nexport const useBlockNumber = (erpc: ERPC | undefined) => {\n  const [blockNumber, setBlockNumber] = React.useState();\n  if (erpc) {\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(parseInt(bn, 16));\n    });\n  }\n  useInterval(() => {\n    if (!erpc) {\n      return;\n    }\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(parseInt(bn, 16));\n    });\n  }, 7000);\n  return [blockNumber];\n};\n\nexport default getBlocks;\n","import * as React from \"react\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default React.createContext<EthereumJSONRPC | undefined>(undefined);\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport AddressView from \"../components/AddressView\";\nimport { useBlockNumber } from \"../helpers\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport ERPCContext from \"../contexts/ERPCContext\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport default function Address({ match }: { match: { params: { address: string } } }) {\n  const { address } = match.params;\n  const erpc = React.useContext<EthereumJSONRPC | undefined>(ERPCContext);\n  const [blockNumber] = useBlockNumber(erpc);\n  const [transactionCount, setTransactionCount] = React.useState();\n  const [balance, setBalance] = React.useState();\n  const [code, setCode] = React.useState();\n\n  React.useEffect(() => {\n    if (blockNumber === undefined || !erpc) {\n      return;\n    }\n    const hexBlockNumber = `0x${blockNumber.toString(16)}`;\n    erpc.eth_getTransactionCount(address, hexBlockNumber).then(setTransactionCount);\n    erpc.eth_getBalance(address, hexBlockNumber).then(setBalance);\n    erpc.eth_getCode(address, hexBlockNumber).then(setCode);\n  }, [blockNumber, address, erpc]);\n\n  if (transactionCount === undefined || balance === undefined || code === undefined) {\n    return <CircularProgress />;\n  }\n  return (\n    <>\n      <AddressView\n        address={address}\n        txCount={transactionCount ? parseInt(transactionCount, 10) : 0}\n        balance={unit.fromWei(balance || 0, \"ether\")}\n        code={code}\n      />\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\n\nimport { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\n\nexport interface ITxListProps {\n  transactions: any[];\n}\n\nfunction TxListItem({ tx }: { tx: any }) {\n  return (\n    <TableRow>\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/tx/${tx.hash}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.hash}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/address/${tx.from}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.from}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        {tx.to !== null ?\n          <Link\n            component={({ className, children }: { children: any, className: string }) => (\n              <RouterLink className={className} to={`/address/${tx.to}`} >\n                {children}\n              </RouterLink>\n            )}>\n            {tx.to}\n          </Link>\n          : null}\n      </TableCell>\n\n      <TableCell>{parseInt(tx.transactionIndex, 16)}</TableCell>\n    </TableRow>\n  );\n}\n\nfunction TxList(props: ITxListProps) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Hash</TableCell>\n          <TableCell>From</TableCell>\n          <TableCell>To</TableCell>\n          <TableCell>Index</TableCell>\n        </TableRow>\n      </TableHead>\n\n      <TableBody>\n        {props.transactions.map((tx: any) => <TxListItem key={tx.hash} tx={tx} />)}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default TxList;\n","import TxList from \"./TxList\";\nexport default TxList;\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport TxList from \"../TxList\";\n\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\n\nfunction BlockView(props: any) {\n  const { block } = props;\n\n  if (!block) {\n    return (<div>Loading...</div>);\n  }\n\n  const {\n    timestamp, hash, parentHash, miner, nonce, difficulty,\n    extraData, stateRoot, transactionsRoot, receiptsRoot, transactions,\n  } = block;\n\n  return (\n    <div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Number</TableCell>\n            <TableCell>{parseInt(block.number, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Timestamp</TableCell>\n            <TableCell>{new Date(parseInt(timestamp, 16) * 1000).toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Hash</TableCell>\n            <TableCell>{hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>ParentHash</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${parentHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {parentHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Miner</TableCell>\n            <TableCell>\n              {miner}\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Nonce</TableCell>\n            <TableCell>{nonce}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Difficulty</TableCell>\n            <TableCell>{difficulty.toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Extra Data</TableCell>\n            <TableCell>{extraData}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>State Root</TableCell>\n            <TableCell>{stateRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Transaction Root</TableCell>\n            <TableCell>{transactionsRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Receipts Root</TableCell>\n            <TableCell>{receiptsRoot}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <TxList transactions={transactions} />\n    </div>\n  );\n}\n\nexport default BlockView;\n","import BlockView from \"./BlockView\";\nexport default BlockView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport BlockView from \"../components/BlockView\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport ERPCContext from \"../contexts/ERPCContext\";\n\nexport default function Block(props: any) {\n  const { match: { params: { hash } } } = props;\n  const erpc = React.useContext<EthereumJSONRPC | undefined>(ERPCContext);\n  const [block, setBlock] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getBlockByHash(hash, true).then(setBlock);\n  }, [hash, erpc]);\n  if (!block) { return (<CircularProgress />); }\n  return (<BlockView block={block} />);\n}\n","import BigNumber from \"bignumber.js\";\n\nexport function hashesToGH(hashes: BigNumber) {\n  return parseInt((hashes.dividedBy(1000000000).toNumber()).toFixed(2), 10);\n}\n\nexport function weiToGwei(wei: any) {\n  if (wei === 0) {\n    return wei;\n  }\n\n  return wei / 1000000000;\n}\n","import HashChart from \"./HashChart\";\nexport default HashChart;\n","import * as React from \"react\";\nimport { VictoryChart, VictoryLabel, VictoryLine, VictoryTheme } from \"victory\";\n\nexport default function HashChart(props: any) {\n  const { title, data, width, height } = props;\n\n  return (\n    <VictoryChart name={title} height={height} width={width} theme={VictoryTheme.material}>\n      <VictoryLabel x={25} y={24} text={title}/>\n      <VictoryLine data={data} height={height} width={width}/>\n    </VictoryChart>\n  );\n}\n","import HashRate from \"./HashRate\";\nexport default HashRate;\n","import BigNumber from \"bignumber.js\";\nimport { hashesToGH } from \"../formatters\";\n\nexport default function HashRate(props: any) {\n  const { block, blockTime } = props;\n  return props.children(hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(blockTime)));\n}\n","import { Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst rightPaddingFix = {\n  paddingRight: \"24px\",\n};\n\nfunction BlockList({ blocks }: any) {\n  if (!blocks) {\n    return null;\n  }\n  const sortedBlocks = blocks.sort((a: { number: number }, b: { number: number }) => {\n    return b.number - a.number;\n  });\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell><Typography>#</Typography></TableCell>\n          <TableCell><Typography>Hash</Typography></TableCell>\n          <TableCell><Typography>Timestamp</Typography></TableCell>\n          <TableCell><Typography>Txs</Typography></TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {sortedBlocks.map((b: any) => {\n          return (\n            <TableRow key={b.number}>\n              <TableCell component=\"th\" scope=\"row\"><Typography>{parseInt(b.number, 16)}</Typography></TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${b.hash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {b.hash}\n                </Link>\n              </TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Typography>{new Date(parseInt(b.timestamp, 16) * 1000).toISOString()}</Typography>\n              </TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Typography>{b.transactions.length}</Typography>\n              </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default BlockList;\n","import BlockList from \"./BlockList\";\nexport default BlockList;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport BlockList from \"../components/BlockList\";\nimport getBlocks from \"../helpers\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport ERPCContext from \"../contexts/ERPCContext\";\n\ninterface IProps {\n  from: number;\n  to: number;\n}\n\nexport default function BlockListContainer(props: IProps) {\n  const { from, to } = props;\n  const erpc = React.useContext<EthereumJSONRPC | undefined>(ERPCContext);\n  const [blocks, setBlocks] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then(setBlocks);\n  }, [from, to, erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <div>\n      Blocks from {from} to {to}\n      <BlockList blocks={blocks} />\n    </div>\n  );\n}\n","import { Button, Grid, Typography, CircularProgress } from \"@material-ui/core\";\nimport BigNumber from \"bignumber.js\";\nimport * as React from \"react\";\nimport { VictoryBar, VictoryChart, VictoryLabel, VictoryTheme } from \"victory\";\nimport { hashesToGH, weiToGwei } from \"../components/formatters\";\nimport HashChart from \"../components/HashChart\";\nimport HashRate from \"../components/HashRate\";\nimport getBlocks, { useBlockNumber } from \"../helpers\";\nimport BlockList from \"./BlockList\";\nimport useInterval from \"use-interval\";\nimport ERPCContext from \"../contexts/ERPCContext\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nconst useState = React.useState;\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\n\nconst blockMapGasUsed = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: new BigNumber(block.gasUsed).dividedBy(1000000),\n  };\n};\n\nconst blockMapUncles = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: block.uncles.length,\n  };\n};\n\nconst blockMapHashRate = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(config.blockTime)),\n  };\n};\n\nconst blockMapTransactionCount = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: block.transactions.length,\n  };\n};\n\nconst getStyles = () => {\n  return {\n    topItems: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n    },\n  };\n};\n\nexport default (props: any) => {\n  const styles = getStyles();\n  const erpc = React.useContext<EthereumJSONRPC | undefined>(ERPCContext);\n  const [blockNumber] = useBlockNumber(erpc);\n  const [chainId, setChainId] = useState();\n  const [block, setBlock] = useState();\n  const [blocks, setBlocks] = useState();\n  const [gasPrice, setGasPrice] = useState();\n  const [syncing, setSyncing] = useState();\n  const [peerCount, setPeerCount] = useState();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_chainId().then(setChainId);\n  }, [chainId, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === undefined) { return; }\n    erpc.eth_getBlockByNumber(`0x${blockNumber.toString(16)}`, true).then(setBlock);\n  }, [blockNumber, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === null) { return; }\n    getBlocks(\n      Math.max(blockNumber - config.blockHistoryLength + 1, 0),\n      blockNumber,\n      erpc,\n    ).then((bl) => {\n      setBlocks(bl);\n    });\n  }, [blockNumber, erpc]);\n\n  useInterval(() => {\n    if (!erpc) { return; }\n\n    erpc.eth_syncing().then(setSyncing);\n  }, 10000, true);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.net_peerCount().then(setPeerCount);\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_gasPrice().then(setGasPrice);\n  }, [erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <div>\n      <Grid container={true} spacing={3}>\n        <Grid style={styles.topItems} item={true} xs={12}>\n          <div key=\"blockHeight\">\n            <Typography variant=\"h6\">\n              Block Height\n            </Typography>\n            <Typography>{blockNumber}</Typography>\n          </div>\n          <div key=\"chainId\">\n            <Typography variant=\"h6\">\n              Chain ID\n            </Typography>\n            <Typography>{parseInt(chainId, 16)}</Typography>\n          </div>\n          <div key=\"syncing\">\n            <Typography variant=\"h6\">\n              Syncing\n            </Typography>\n            {typeof syncing === \"object\" && syncing.currentBlock &&\n              <Typography variant=\"h6\">\n                {parseInt(syncing.currentBlock, 16)} / {parseInt(syncing.highestBlock || \"0x0\", 16)}\n              </Typography>\n            }\n            {!syncing && <Typography>No</Typography>}\n          </div>\n          <div key=\"gasPrice\">\n            <Typography variant=\"h6\">\n              Gas Price\n            </Typography>\n            <Typography>{weiToGwei(parseInt(gasPrice, 16))} Gwei</Typography>\n          </div>\n          <div key=\"hRate\">\n            <Typography variant=\"h6\">\n              Network Hash Rate\n            </Typography>\n            {block &&\n              <HashRate block={block} blockTime={config.blockTime}>\n                {(hashRate: any) => <Typography>{hashRate} GH/s</Typography>}\n              </HashRate>\n            }\n          </div>\n          <div>\n            <Typography variant=\"h6\">\n              Peers\n            </Typography>\n            <Typography>{parseInt(peerCount, 16)}</Typography>\n          </div>\n        </Grid>\n        <Grid key=\"hashChart\" item={true} xs={12} sm={6} lg={3}>\n          <HashChart\n            height={config.chartHeight}\n            title={`Hash Rate Last ${blocks.length} blocks`}\n            data={blocks.map(blockMapHashRate)} />\n        </Grid>\n        <Grid key=\"txChart\" item={true} xs={12} sm={6} lg={3}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={VictoryTheme.material}>\n            <VictoryLabel x={25} y={24} text={`Transaction count last ${blocks.length} blocks`} />\n            <VictoryBar data={blocks.map(blockMapTransactionCount)} />\n          </VictoryChart>\n        </Grid>\n        <Grid key=\"gasUsed\" item={true} xs={12} sm={6} lg={3}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={VictoryTheme.material}>\n            <VictoryLabel x={25} y={24} text={`Gas Used Last ${blocks.length} blocks`} />\n            <VictoryBar data={blocks.map(blockMapGasUsed)} />\n          </VictoryChart>\n        </Grid>\n        <Grid key=\"uncles\" item={true} xs={12} sm={6} lg={3}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={VictoryTheme.material}>\n            <VictoryLabel x={25} y={24} text={`Uncles Last ${blocks.length} blocks`} />\n            <VictoryBar data={blocks.map(blockMapUncles)} />\n          </VictoryChart>\n        </Grid>\n\n        <Grid item={true} key={\"blocks\"}>\n          <Button href={\"/blocks\"}>View All Blocks</Button>\n          <BlockList from={Math.max(blockNumber - 11, 0)} to={blockNumber} />\n        </Grid>\n\n      </Grid>\n    </div>\n  );\n};\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport { useBlockNumber } from \"../helpers\";\nimport BlockList from \"./BlockList\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport ERPCContext from \"../contexts/ERPCContext\";\n\nexport default function NodeView(props: any) {\n  const erpc = React.useContext<EthereumJSONRPC | undefined>(ERPCContext);\n  const [blockNumber] = useBlockNumber(erpc);\n  if (!blockNumber) {\n    return (<CircularProgress />);\n  }\n  return (\n    <BlockList from={Math.max(blockNumber - 15, 0)} to={blockNumber}/>\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport interface ITxViewProps {\n  tx: any;\n  receipt: any | null;\n}\n\nfunction renderTxTable(tx: any, receipt: any | null) {\n  return (\n    <div>\n      <div>General</div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Hash</TableCell>\n            <TableCell>{tx.hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Block</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${tx.blockHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.blockHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Block number</TableCell>\n            <TableCell>{parseInt(tx.blockNumber, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Gas</TableCell>\n            <TableCell>{unit.fromWei(tx.gas, \"ether\")}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Gas Price</TableCell>\n            <TableCell>{parseInt(tx.gasPrice, 10)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Value</TableCell>\n            <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>From</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${tx.from}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.from}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>To</TableCell>\n            <TableCell>\n              {tx.to !== null ?\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${tx.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {tx.to}\n                </Link>\n                : null\n              }\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Nonce</TableCell>\n            <TableCell>{parseInt(tx.nonce, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Transaction Index</TableCell>\n            <TableCell>{parseInt(tx.transactionIndex, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Input</TableCell>\n            <TableCell>{tx.input}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>ReplayProtected</TableCell>\n            <TableCell>{tx.replayProtected && tx.replayProtected.toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>v</TableCell>\n            <TableCell>{tx.v}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>r</TableCell>\n            <TableCell>{tx.r}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>s</TableCell>\n            <TableCell>{tx.s}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <div>Receipt</div>\n      {receipt &&\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Hash</TableCell>\n              <TableCell>{receipt.transactionHash}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Block</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${receipt.blockHash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.blockHash}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Block number</TableCell>\n              <TableCell>{parseInt(receipt.blockNumber, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Gas Used</TableCell>\n              <TableCell>{parseInt(receipt.gasUsed, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Cumulative Gas Used</TableCell>\n              <TableCell>{parseInt(receipt.cumulativeGasUsed, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Value</TableCell>\n              <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>From</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.from}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.from}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>To</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.to}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Contract Address</TableCell>\n              <TableCell>{receipt.contractAddress}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Transaction Index</TableCell>\n              <TableCell>{parseInt(receipt.transactionIndex, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Status</TableCell>\n              <TableCell>{receipt.status}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Logs</TableCell>\n              <TableCell>\n                {receipt.logs.length}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      }\n    </div>\n  );\n}\n\nfunction TxView(props: ITxViewProps) {\n  const { tx, receipt } = props;\n  if (!tx) {\n    return null;\n  }\n\n  return renderTxTable(tx, receipt);\n}\n\nexport default TxView;\n","import TxView from \"./TxView\";\nexport default TxView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport TxView from \"../components/TxView\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport ERPCContext from \"../contexts/ERPCContext\";\n\nexport default function TransactionContainer(props: any) {\n  const hash = props.match.params.hash;\n  const erpc = React.useContext<EthereumJSONRPC | undefined>(ERPCContext);\n  const [transaction, setTransaction] = React.useState();\n  const [receipt, setReceipt] = React.useState();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionByHash(hash).then(setTransaction);\n  }, [hash, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionReceipt(hash).then(setReceipt);\n  }, [hash, erpc]);\n\n  if (!transaction || !receipt) {\n    return (<CircularProgress />);\n  }\n\n  return (<TxView tx={transaction} receipt={receipt} />);\n}\n","import * as React from \"react\";\nimport { IconButton, Menu, MenuItem, ListItemText, ListItemSecondaryAction, Input, ListItemIcon } from \"@material-ui/core\"; //tslint:disable-line\nimport { Settings, NavigateNext, NavigateBefore } from \"@material-ui/icons\";\n\ninterface IConfigurationMenuProps {\n  onChange: (type: string, url: string) => any;\n}\n\ninterface IPagedMenuProps {\n  onChange: (type: string, url: string) => any;\n}\n\nconst PagedMenu: React.FC<IPagedMenuProps> = (props) => {\n  const [selected, setSelected] = React.useState<\"service-runner\" | \"ethereum-rpc\" | null>(null);\n  const nameMap = {\n    \"service-runner\": \"Service Runner RPC\",\n    \"ethereum-rpc\": \"Ethereum RPC\",\n  };\n\n  if (selected) {\n    return (\n      <>\n        <MenuItem onClick={() => setSelected(null)}>\n          <ListItemIcon>\n            <NavigateBefore />\n          </ListItemIcon>\n          <ListItemText>\n            Back\n          </ListItemText>\n        </MenuItem>\n        <Input\n          onChange={(e) => props.onChange(selected, e.currentTarget.value)}\n          placeholder={`${nameMap[selected]} Url`}\n          fullWidth={true}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MenuItem onClick={() => setSelected(\"service-runner\")}>\n        <ListItemText>\n          Service Runner RPC\n          </ListItemText>\n        <ListItemSecondaryAction>\n          <NavigateNext />\n        </ListItemSecondaryAction>\n      </MenuItem>\n      <MenuItem onClick={() => setSelected(\"ethereum-rpc\")}>\n        <ListItemText>\n          Ethereum RPC\n          </ListItemText>\n        <ListItemSecondaryAction>\n          <NavigateNext />\n        </ListItemSecondaryAction>\n      </MenuItem>\n    </>\n  );\n\n};\n\nconst ConfigurationMenu: React.FC<IConfigurationMenuProps> = (props) => {\n  const [anchorEl, setAnchorEl] = React.useState<any>(null);\n  const open = !!anchorEl;\n\n  function handleMenu(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"Account of current user\"\n        aria-controls=\"menu-appbar\"\n        aria-haspopup=\"true\"\n        onClick={handleMenu}\n        color=\"inherit\"\n      >\n        <Settings />\n      </IconButton>\n      <Menu\n        id=\"menu-appbar\"\n        getContentAnchorEl={null}\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        PaperProps={{\n          style: {\n            width: \"250px\",\n          },\n        }}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n        onClose={handleClose}\n      >\n        <PagedMenu onChange={props.onChange}></PagedMenu>\n      </Menu>\n    </>\n  );\n};\n\nexport default ConfigurationMenu;\n","import ConfigurationMenu from \"./ConfigurationMenu\";\nexport default ConfigurationMenu;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const lightTheme = createMuiTheme({\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    background: {\n      default: \"#212121\",\n      paper: \"black\",\n    },\n  },\n  overrides: {\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: \"#fff\",\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport * as React from \"react\";\n\nconst serviceName = \"multi-geth\";\n\nfunction useMultiGeth(\n  serviceRunner: JadeServiceRunner | undefined,\n  serviceRunnerUrl: string,\n  version: string,\n  env: string,\n): [ERPC] {\n  const [erpc, setErpc] = React.useState();\n  React.useEffect(() => {\n    if (!serviceRunner) {\n      return;\n    }\n    const runAsync = async () => {\n      const installed = await serviceRunner.installService(serviceName, version);\n      if (!installed) {\n        return;\n      }\n      await serviceRunner.startService(serviceName, version, env);\n      let parsedUrl;\n      try {\n        parsedUrl = new URL(`${serviceRunnerUrl}/${serviceName}/${env}/${version}`);\n      } catch (e) {\n        return;\n      }\n      let rpc;\n      try {\n        const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n        const fallbackPort = protocol === \"http\" ? 80 : 443;\n        const port = parseInt(parsedUrl.port, 10);\n        rpc = new ERPC({\n          transport: {\n            host: parsedUrl.hostname,\n            port: port ? port : fallbackPort,\n            type: protocol,\n            path: parsedUrl.pathname,\n          },\n        });\n      } catch (e) {\n        return;\n      }\n      if (rpc) {\n        setErpc(rpc);\n      }\n    };\n    runAsync();\n  }, [serviceRunner, serviceRunnerUrl, version, env]);\n  return [erpc];\n}\n\nexport default useMultiGeth;\n","import JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport * as React from \"react\";\n\nfunction useServiceRunner(defaultUrl: string): [JadeServiceRunner | undefined, string, any] {\n  const [url, setUrl] = React.useState(defaultUrl);\n  const [serviceRunner, setServiceRunner] = React.useState<JadeServiceRunner | undefined>();\n  React.useEffect(() => {\n    if (!url) {\n      return;\n    }\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (e) {\n      return;\n    }\n    let rpc;\n    try {\n      const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n      const fallbackPort = protocol === \"http\" ? 80 : 443;\n      const port = parseInt(parsedUrl.port, 10);\n      rpc = new JadeServiceRunner({\n        transport: {\n          host: parsedUrl.hostname,\n          port: port ? port : fallbackPort,\n          type: protocol,\n        },\n      });\n    } catch (e) {\n      return;\n    }\n    if (rpc) {\n      setServiceRunner(rpc);\n    }\n  }, [url]);\n  return [serviceRunner, url, setUrl];\n}\n\nexport default useServiceRunner;\n","import { AppBar, CssBaseline, Theme, Toolbar, Typography, IconButton } from \"@material-ui/core\"; //tslint:disable-line\nimport { makeStyles, ThemeProvider } from \"@material-ui/styles\";\nimport * as React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport useDarkMode from \"use-dark-mode\";\nimport \"./App.css\";\nimport Address from \"./containers/Address\";\nimport Block from \"./containers/Block\";\nimport Dashboard from \"./containers/Dashboard\";\nimport NodeView from \"./containers/NodeView\";\nimport Transaction from \"./containers/Transaction\";\nimport ConfigurationMenu from \"./containers/ConfigurationMenu\";\nimport { darkTheme, lightTheme } from \"./themes/jadeTheme\";\n\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport useMultiGeth from \"./hooks/useMultiGeth\";\nimport useServiceRunner from \"./hooks/useServiceRunner\";\nimport ERPCContext from \"./contexts/ERPCContext\";\nimport useInterval from \"use-interval\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App(props: any) {\n  const darkMode = useDarkMode();\n  const [serviceRunner, serviceRunnerUrl, setServiceRunnerUrl] = useServiceRunner(\"http://localhost:8002\");\n  const [erpc] = useMultiGeth(serviceRunner, serviceRunnerUrl, \"1.9.0\", \"mainnet\");\n  const theme = darkMode.value ? darkTheme : lightTheme;\n  const classes = useStyles(theme);\n  const handleConfigurationChange = (type: string, url: string) => {\n    if (type === \"service-runner\") {\n      setServiceRunnerUrl(url);\n    }\n  };\n\n  React.useEffect(() => {\n    if (erpc) {\n      erpc.startBatch();\n    }\n  }, [erpc]);\n\n  useInterval(() => {\n    if (erpc) {\n      erpc.stopBatch();\n      erpc.startBatch();\n    }\n  }, 100, true);\n\n  return (\n    <ERPCContext.Provider value={erpc}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppBar position=\"static\" color=\"default\" elevation={0}>\n          <Toolbar>\n            <Typography className={classes.title}>Jade Block Explorer</Typography>\n            <IconButton onClick={darkMode.toggle}>\n              {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n            </IconButton>\n            <ConfigurationMenu onChange={handleConfigurationChange} />\n          </Toolbar>\n        </AppBar>\n        <div style={{ margin: \"0px 25px 0px 25px\" }}>\n          <Router>\n            <Switch>\n              <Route path={\"/\"} component={Dashboard} exact={true} />\n              <Route path={\"/block/:hash\"} component={Block} />\n              <Route path={\"/blocks\"} component={NodeView} />\n              <Route path={\"/tx/:hash\"} component={Transaction} />\n              <Route path={\"/address/:address\"} component={Address} />\n            </Switch>\n          </Router>\n        </div>\n      </ThemeProvider>\n    </ERPCContext.Provider>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\") as HTMLElement,\n);\n"],"sourceRoot":""}