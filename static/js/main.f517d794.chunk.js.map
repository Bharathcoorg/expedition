{"version":3,"sources":["components/AddressView/AddressView.tsx","components/AddressView/index.ts","helpers.tsx","hooks/useMultiGeth.ts","hooks/useServiceRunner.ts","stores/useServiceRunnerStore.ts","stores/useMultiGethStore.ts","containers/Address.tsx","components/TxList/TxList.tsx","components/TxList/index.ts","components/BlockView/BlockView.tsx","components/BlockView/index.ts","containers/Block.tsx","components/formatters.ts","components/HashRate/index.ts","components/HashRate/HashRate.tsx","themes/victoryTheme.ts","components/ChartCard.tsx","components/BlockCard/index.ts","components/BlockCard/BlockCard.tsx","containers/BlockCardList.tsx","components/BlockList/BlockList.tsx","components/BlockList/index.ts","containers/BlockList.tsx","containers/Dashboard.tsx","containers/NodeView.tsx","components/TxView/TxView.tsx","components/TxView/index.ts","containers/Transaction.tsx","containers/ConfigurationMenu/ConfigurationMenu.tsx","containers/ConfigurationMenu/index.ts","themes/jadeTheme.ts","App.tsx","index.tsx"],"names":["AddressView","props","react","address","balance","txCount","code","value","renderGeneral","useBlockNumber","erpc","_React$useState","React","_React$useState2","Object","slicedToArray","blockNumber","setBlockNumber","eth_blockNumber","then","bn","parseInt","useInterval","getBlocks","from","to","promises","i","push","eth_getBlockByNumber","concat","toString","Promise","all","serviceName","useMultiGeth","serviceRunner","serviceRunnerUrl","version","env","setErpc","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","parsedUrl","rpc","protocol","fallbackPort","port","wrap","_context","prev","next","installService","sent","abrupt","startService","URL","t0","split","ERPC","transport","host","hostname","type","path","pathname","t1","stop","apply","this","arguments","runAsync","useServiceRunner","defaultUrl","url","setUrl","_React$useState3","_React$useState4","setServiceRunner","e","JadeServiceRunner","createStore","_useServiceRunnerStor","useServiceRunnerStore","_useServiceRunnerStor2","unit","require","Address","match","params","_useMultiGethStore","useMultiGethStore","_useBlockNumber","transactionCount","setTransactionCount","setBalance","_React$useState5","_React$useState6","setCode","undefined","hexBlockNumber","eth_getTransactionCount","eth_getBalance","eth_getCode","CircularProgress","components_AddressView","fromWei","TxListItem","tx","TableRow","TableCell","Link","component","_ref2","className","children","es_Link","hash","_ref3","_ref4","transactionIndex","TxList","Table","TableHead","TableBody","transactions","map","key","BlockView","block","timestamp","parentHash","miner","nonce","difficulty","extraData","stateRoot","transactionsRoot","receiptsRoot","number","Date","components_TxList","Block","setBlock","eth_getBlockByHash","components_BlockView","hashesToGH","hashes","dividedBy","toNumber","toFixed","HashRate","blockTime","BigNumber","baseLabelStyles","fontFamily","fontSize","letterSpacing","padding","fill","grey","stroke","strokeWidth","centeredLabelStyles","objectSpread","textAnchor","getTheme","theme","axis","style","axisLabel","grid","ticks","tickLabels","line","data","palette","primary","main","labels","bar","ChartCard","Card","background","CardContent","Typography","variant","title","BlockCard","d","moment","toISOString","format","elevation","CardHeader","gutterBottom","Chip","label","length","BlockCardListContainer","blocks","setBlocks","Grid","container","spacing","sort","b","item","xs","sm","components_BlockCard","rightPaddingFix","paddingRight","BlockList","sortedBlocks","scope","BlockListContainer","components_BlockList","useState","config","blockMapGasUsed","x","y","gasUsed","blockMapUncles","uncles","blockMapHashRate","blockMapTransactionCount","Dashboard","wei","styles","topItems","display","justifyContent","alignItems","useTheme","victoryTheme","_useState","_useState2","chainId","setChainId","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","gasPrice","setGasPrice","_useState9","_useState10","syncing","setSyncing","_useState11","_useState12","peerCount","setPeerCount","eth_chainId","Math","max","bl","eth_syncing","net_peerCount","eth_gasPrice","components_ChartCard","currentBlock","highestBlock","components_HashRate","hashRate","lg","victory_chart","height","width","victory_line","victory_bar","marginTop","NodeView","TxView","receipt","blockHash","gas","input","replayProtected","v","r","s","transactionHash","cumulativeGasUsed","_ref5","_ref6","contractAddress","status","logs","renderTxTable","TransactionContainer","transaction","setTransaction","setReceipt","eth_getTransactionByHash","eth_getTransactionReceipt","components_TxView","PagedMenu","selected","setSelected","MenuItem","onClick","ListItemIcon","NavigateBefore","ListItemText","Input","onChange","currentTarget","placeholder","service-runner","ethereum-rpc","fullWidth","ListItemSecondaryAction","NavigateNext","ConfigurationMenu","anchorEl","setAnchorEl","open","IconButton","aria-label","aria-controls","aria-haspopup","event","color","Settings","Menu","id","getContentAnchorEl","keepMounted","PaperProps","anchorOrigin","vertical","horizontal","transformOrigin","onClose","ConfigurationMenu_PagedMenu","lightTheme","createMuiTheme","MuiAppBar","position","MuiCard","overrides","root","default","darkTheme","paper","MuiTable","MuiTypography","useStyles","makeStyles","flexGrow","App","darkMode","useDarkMode","setServiceRunnerUrl","classes","startBatch","stopBatch","BrowserRouter","ThemeProvider","CssBaseline","AppBar","Toolbar","justify","alt","marginRight","src","toggle","Brightness3_default","WbSunny_default","containers_ConfigurationMenu","margin","Switch","Route","exact","Transaction","ReactDOM","dist","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f517d794.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport interface IAddressViewProps {\n  address: string;\n  balance: string;\n  txCount: number;\n  code: string;\n}\n\nfunction renderGeneral(props: IAddressViewProps) {\n  const { address, balance, txCount, code } = props;\n  return (\n    <div>\n      <div>Balance: {balance}</div>\n      <div>Tx count: {txCount}</div>\n      <div>{address}</div>\n      <div>Code</div>\n      <div>\n        <textarea value={code} />\n      </div>\n    </div>\n  );\n}\n\nfunction AddressView(props: IAddressViewProps) {\n  return (\n    <React.Fragment>\n        {renderGeneral(props)}\n    </React.Fragment>\n  );\n}\n\nexport default AddressView;\n","import AddressView from \"./AddressView\";\nexport default AddressView;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport * as React from \"react\";\nimport useInterval from \"use-interval\";\n\nexport const getBlocks = (from: number, to: number, erpc: ERPC): Promise<any> => {\n  const promises: any[] = [];\n  for (let i = from; i < to; i++) {\n    promises.push(erpc.eth_getBlockByNumber(`0x${i.toString(16)}`, true));\n  }\n  return Promise.all(promises);\n};\n\nexport const useBlockNumber = (erpc: ERPC | undefined) => {\n  const [blockNumber, setBlockNumber] = React.useState();\n  if (erpc) {\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(parseInt(bn, 16));\n    });\n  }\n  useInterval(() => {\n    if (!erpc) {\n      return;\n    }\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(parseInt(bn, 16));\n    });\n  }, 7000);\n  return [blockNumber];\n};\n\nexport default getBlocks;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport * as React from \"react\";\n\nconst serviceName = \"multi-geth\";\n\nfunction useMultiGeth(\n  serviceRunner: JadeServiceRunner | undefined,\n  serviceRunnerUrl: string,\n  version: string,\n  env: string,\n): [ERPC] {\n  const [erpc, setErpc] = React.useState();\n  React.useEffect(() => {\n    if (!serviceRunner) {\n      return;\n    }\n    const runAsync = async () => {\n      const installed = await serviceRunner.installService(serviceName, version);\n      if (!installed) {\n        return;\n      }\n      await serviceRunner.startService(serviceName, version, env);\n      let parsedUrl;\n      try {\n        parsedUrl = new URL(`${serviceRunnerUrl}/${serviceName}/${env}/${version}`);\n      } catch (e) {\n        return;\n      }\n      let rpc;\n      try {\n        const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n        const fallbackPort = protocol === \"http\" ? 80 : 443;\n        const port = parseInt(parsedUrl.port, 10);\n        rpc = new ERPC({\n          transport: {\n            host: parsedUrl.hostname,\n            port: port ? port : fallbackPort,\n            type: protocol,\n            path: parsedUrl.pathname,\n          },\n        });\n      } catch (e) {\n        return;\n      }\n      if (rpc) {\n        setErpc(rpc);\n      }\n    };\n    runAsync();\n  }, [serviceRunner, serviceRunnerUrl, version, env]);\n  return [erpc];\n}\n\nexport default useMultiGeth;\n","import JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport * as React from \"react\";\n\nfunction useServiceRunner(defaultUrl: string): [JadeServiceRunner | undefined, string, any] {\n  const [url, setUrl] = React.useState(defaultUrl);\n  const [serviceRunner, setServiceRunner] = React.useState<JadeServiceRunner | undefined>();\n  React.useEffect(() => {\n    if (!url) {\n      return;\n    }\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (e) {\n      return;\n    }\n    let rpc;\n    try {\n      const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n      const fallbackPort = protocol === \"http\" ? 80 : 443;\n      const port = parseInt(parsedUrl.port, 10);\n      rpc = new JadeServiceRunner({\n        transport: {\n          host: parsedUrl.hostname,\n          port: port ? port : fallbackPort,\n          type: protocol,\n        },\n      });\n    } catch (e) {\n      return;\n    }\n    if (rpc) {\n      setServiceRunner(rpc);\n    }\n  }, [url]);\n  return [serviceRunner, url, setUrl];\n}\n\nexport default useServiceRunner;\n","import { createStore } from \"reusable\";\nimport useServiceRunner from \"../hooks/useServiceRunner\";\nexport default createStore(() => useServiceRunner(\"http://localhost:8002\"));\n","import { createStore } from \"reusable\";\nimport useMultiGeth from \"../hooks/useMultiGeth\";\nimport useServiceRunnerStore from \"./useServiceRunnerStore\";\n\nexport default createStore(() => {\n  const [serviceRunner, serviceRunnerUrl] = useServiceRunnerStore();\n  return useMultiGeth(serviceRunner, serviceRunnerUrl, \"1.9.0\", \"mainnet\");\n});\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport AddressView from \"../components/AddressView\";\nimport { useBlockNumber } from \"../helpers\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport default function Address({ match }: { match: { params: { address: string } } }) {\n  const { address } = match.params;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  const [transactionCount, setTransactionCount] = React.useState();\n  const [balance, setBalance] = React.useState();\n  const [code, setCode] = React.useState();\n\n  React.useEffect(() => {\n    if (blockNumber === undefined || !erpc) {\n      return;\n    }\n    const hexBlockNumber = `0x${blockNumber.toString(16)}`;\n    erpc.eth_getTransactionCount(address, hexBlockNumber).then(setTransactionCount);\n    erpc.eth_getBalance(address, hexBlockNumber).then(setBalance);\n    erpc.eth_getCode(address, hexBlockNumber).then(setCode);\n  }, [blockNumber, address, erpc]);\n\n  if (transactionCount === undefined || balance === undefined || code === undefined) {\n    return <CircularProgress />;\n  }\n  return (\n    <>\n      <AddressView\n        address={address}\n        txCount={transactionCount ? parseInt(transactionCount, 10) : 0}\n        balance={unit.fromWei(balance || 0, \"ether\")}\n        code={code}\n      />\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\n\nimport { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\n\nexport interface ITxListProps {\n  transactions: any[];\n}\n\nfunction TxListItem({ tx }: { tx: any }) {\n  return (\n    <TableRow>\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/tx/${tx.hash}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.hash}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/address/${tx.from}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.from}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        {tx.to !== null ?\n          <Link\n            component={({ className, children }: { children: any, className: string }) => (\n              <RouterLink className={className} to={`/address/${tx.to}`} >\n                {children}\n              </RouterLink>\n            )}>\n            {tx.to}\n          </Link>\n          : null}\n      </TableCell>\n\n      <TableCell>{parseInt(tx.transactionIndex, 16)}</TableCell>\n    </TableRow>\n  );\n}\n\nfunction TxList(props: ITxListProps) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Hash</TableCell>\n          <TableCell>From</TableCell>\n          <TableCell>To</TableCell>\n          <TableCell>Index</TableCell>\n        </TableRow>\n      </TableHead>\n\n      <TableBody>\n        {props.transactions.map((tx: any) => <TxListItem key={tx.hash} tx={tx} />)}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default TxList;\n","import TxList from \"./TxList\";\nexport default TxList;\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport TxList from \"../TxList\";\n\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\n\nfunction BlockView(props: any) {\n  const { block } = props;\n\n  if (!block) {\n    return (<div>Loading...</div>);\n  }\n\n  const {\n    timestamp, hash, parentHash, miner, nonce, difficulty,\n    extraData, stateRoot, transactionsRoot, receiptsRoot, transactions,\n  } = block;\n\n  return (\n    <div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Number</TableCell>\n            <TableCell>{parseInt(block.number, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Timestamp</TableCell>\n            <TableCell>{new Date(parseInt(timestamp, 16) * 1000).toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Hash</TableCell>\n            <TableCell>{hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>ParentHash</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${parentHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {parentHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Miner</TableCell>\n            <TableCell>\n              {miner}\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Nonce</TableCell>\n            <TableCell>{nonce}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Difficulty</TableCell>\n            <TableCell>{difficulty.toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Extra Data</TableCell>\n            <TableCell>{extraData}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>State Root</TableCell>\n            <TableCell>{stateRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Transaction Root</TableCell>\n            <TableCell>{transactionsRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Receipts Root</TableCell>\n            <TableCell>{receiptsRoot}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <TxList transactions={transactions} />\n    </div>\n  );\n}\n\nexport default BlockView;\n","import BlockView from \"./BlockView\";\nexport default BlockView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport BlockView from \"../components/BlockView\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function Block(props: any) {\n  const { match: { params: { hash } } } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [block, setBlock] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getBlockByHash(hash, true).then(setBlock);\n  }, [hash, erpc]);\n  if (!block) { return (<CircularProgress />); }\n  return (<BlockView block={block} />);\n}\n","import BigNumber from \"bignumber.js\";\n\nexport function hashesToGH(hashes: BigNumber) {\n  return parseInt((hashes.dividedBy(1000000000).toNumber()).toFixed(2), 10);\n}\n\nexport function weiToGwei(wei: any) {\n  if (wei === 0) {\n    return wei;\n  }\n\n  return wei / 1000000000;\n}\n","import HashRate from \"./HashRate\";\nexport default HashRate;\n","import BigNumber from \"bignumber.js\";\nimport { hashesToGH } from \"../formatters\";\n\nexport default function HashRate(props: any) {\n  const { block, blockTime } = props;\n  return props.children(hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(blockTime)));\n}\n","import { grey } from \"@material-ui/core/colors\";\nimport { Theme } from \"@material-ui/core\";\n\nconst sansSerif = \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\";\n\nconst baseLabelStyles = {\n  fontFamily: sansSerif,\n  fontSize: 12,\n  letterSpacing: \"normal\",\n  padding: 10,\n  fill: grey[400],\n  stroke: \"transparent\",\n  strokeWidth: 0,\n};\n\nconst centeredLabelStyles = {\n  ...baseLabelStyles,\n  textAnchor: \"middle\",\n};\n\nconst getTheme = (theme: Theme) => ({\n  axis: {\n    style: {\n      axis: {\n        stroke: grey[400],\n        strokeWidth: 2,\n      },\n      axisLabel: {\n        ...centeredLabelStyles,\n      },\n      grid: {\n        stroke: \"none\",\n      },\n      ticks: {\n        stroke: grey[400],\n      },\n      tickLabels: {\n        padding: 5,\n        fill: grey[400],\n        strokeWidth: 1,\n      },\n    },\n  },\n  line: {\n    style: {\n      data: {\n        stroke: theme.palette.primary.main,\n        strokeWidth: 2,\n      },\n      labels: {\n        ...baseLabelStyles,\n      },\n    },\n  },\n  bar: {\n    style: {\n      data: {\n        fill: theme.palette.primary.main,\n        stroke: theme.palette.primary.main,\n      },\n      labels: {\n        ...baseLabelStyles,\n      },\n    },\n  },\n});\n\nexport default getTheme;\n","import * as React from \"react\";\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\n\ninterface IProps {\n  children: any;\n  title: string;\n}\n\nconst ChartCard: React.FC<IProps> = (props) => {\n  return (\n    <Card style={{background: \"transparent\"}}>\n      <CardContent>\n        <Typography variant=\"h6\">{props.title}</Typography>\n        {props.children}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ChartCard;\n","import BlockCard from \"./BlockCard\";\nexport default BlockCard;\n","import * as React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { Card, CardHeader, CardContent, Typography, Chip } from \"@material-ui/core\";\nimport moment from \"moment\";\n\ninterface IProps {\n  block: any;\n}\n\nexport default function BlockCard(props: IProps) {\n  const { block } = props;\n  const d = moment(new Date(parseInt(block.timestamp, 16) * 1000).toISOString()).format('MMMM Do YYYY, h:mm:ss a')\n\n  return (\n    <Link\n      component={({ className, children }: { children: any, className: string }) => (\n        <RouterLink className={className} to={`/block/${block.hash}`} >\n          {children}\n        </RouterLink>\n      )}>\n      <Card elevation={1}>\n        <CardHeader title={parseInt(block.number, 16)}>\n        </CardHeader>\n        <CardContent>\n          <Typography variant=\"caption\" style={{ fontSize: \"11px\" }}>{block.hash}</Typography>\n          <Typography gutterBottom>{d}</Typography>\n          <Chip label={`${block.transactions.length} Transactions`}>\n          </Chip>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","import { CircularProgress, Grid } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport getBlocks from \"../helpers\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport BlockCard from \"../components/BlockCard\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  style?: any;\n}\n\nexport default function BlockCardListContainer(props: IProps) {\n  const { from, to, style } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blocks, setBlocks] = React.useState([]);\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then(setBlocks);\n  }, [from, to, erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <Grid container spacing={2} style={style}>\n      {\n        blocks.sort((a: any, b: any) => {\n          return parseInt(b.number, 16) - parseInt(a.number, 16);\n        }).map((block: any) => {\n          return (\n            <Grid item xs={12} sm={4}>\n              <BlockCard block={block} />\n            </Grid>\n          );\n        })\n      }\n    </Grid>\n  );\n}\n","import { Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst rightPaddingFix = {\n  paddingRight: \"24px\",\n};\n\nfunction BlockList({ blocks }: any) {\n  if (!blocks) {\n    return null;\n  }\n  const sortedBlocks = blocks.sort((a: { number: number }, b: { number: number }) => {\n    return b.number - a.number;\n  });\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell><Typography>#</Typography></TableCell>\n          <TableCell><Typography>Hash</Typography></TableCell>\n          <TableCell><Typography>Timestamp</Typography></TableCell>\n          <TableCell><Typography>Txs</Typography></TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {sortedBlocks.map((b: any) => {\n          return (\n            <TableRow key={b.number}>\n              <TableCell component=\"th\" scope=\"row\"><Typography>{parseInt(b.number, 16)}</Typography></TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${b.hash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {b.hash}\n                </Link>\n              </TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Typography>{new Date(parseInt(b.timestamp, 16) * 1000).toISOString()}</Typography>\n              </TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Typography>{b.transactions.length}</Typography>\n              </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default BlockList;\n","import BlockList from \"./BlockList\";\nexport default BlockList;\n","import { CircularProgress } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport BlockList from \"../components/BlockList\";\nimport getBlocks from \"../helpers\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  style?: any;\n}\n\nexport default function BlockListContainer(props: IProps) {\n  const { from, to, style } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blocks, setBlocks] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then(setBlocks);\n  }, [from, to, erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <div style={style}>\n      <BlockList blocks={blocks} />\n    </div>\n  );\n}\n","import { Grid, Typography, CircularProgress, Theme } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport BigNumber from \"bignumber.js\";\nimport * as React from \"react\";\nimport { VictoryBar, VictoryChart, VictoryLine } from \"victory\";\nimport { hashesToGH, weiToGwei } from \"../components/formatters\";\nimport HashRate from \"../components/HashRate\";\nimport getBlocks, { useBlockNumber } from \"../helpers\";\nimport useInterval from \"use-interval\";\nimport { useTheme } from \"@material-ui/styles\";\nimport getTheme from \"../themes/victoryTheme\";\nimport ChartCard from \"../components/ChartCard\";\nimport BlockCardListContainer from \"./BlockCardList\";\nimport BlockListContainer from \"./BlockList\";\n\nconst useState = React.useState;\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\n\nconst blockMapGasUsed = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: new BigNumber(block.gasUsed).dividedBy(1000000),\n  };\n};\n\nconst blockMapUncles = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: block.uncles.length,\n  };\n};\n\nconst blockMapHashRate = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(config.blockTime)),\n  };\n};\n\nconst blockMapTransactionCount = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: block.transactions.length,\n  };\n};\n\nconst getStyles = () => {\n  return {\n    topItems: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n    },\n  };\n};\n\nexport default (props: any) => {\n  const styles = getStyles();\n  const [erpc] = useMultiGethStore();\n  const theme = useTheme<Theme>();\n  const victoryTheme = getTheme(theme);\n  const [blockNumber] = useBlockNumber(erpc);\n  const [chainId, setChainId] = useState();\n  const [block, setBlock] = useState();\n  const [blocks, setBlocks] = useState();\n  const [gasPrice, setGasPrice] = useState();\n  const [syncing, setSyncing] = useState();\n  const [peerCount, setPeerCount] = useState();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_chainId().then(setChainId);\n  }, [chainId, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === undefined) { return; }\n    erpc.eth_getBlockByNumber(`0x${blockNumber.toString(16)}`, true).then(setBlock);\n  }, [blockNumber, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === null) { return; }\n    getBlocks(\n      Math.max(blockNumber - config.blockHistoryLength + 1, 0),\n      blockNumber,\n      erpc,\n    ).then((bl) => {\n      setBlocks(bl);\n    });\n  }, [blockNumber, erpc]);\n\n  useInterval(() => {\n    if (!erpc) { return; }\n\n    erpc.eth_syncing().then(setSyncing);\n  }, 10000, true);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.net_peerCount().then(setPeerCount);\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_gasPrice().then(setGasPrice);\n  }, [erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <div>\n      <Grid container={true} spacing={3}>\n        <Grid style={styles.topItems} item={true} xs={12}>\n          <div key=\"blockHeight\">\n            <ChartCard title=\"Block Height\">\n              <Typography variant=\"h3\">{blockNumber}</Typography>\n            </ChartCard>\n          </div>\n          <div key=\"chainId\">\n            <ChartCard title=\"Chain ID\">\n              <Typography variant=\"h3\">{parseInt(chainId, 16)}</Typography>\n            </ChartCard>\n          </div>\n          <div key=\"syncing\">\n            <ChartCard title=\"Syncing\">\n              {typeof syncing === \"object\" && syncing.currentBlock &&\n                <Typography variant=\"h3\">\n                  {parseInt(syncing.currentBlock, 16)} / {parseInt(syncing.highestBlock || \"0x0\", 16)}\n                </Typography>\n              }\n              {!syncing && <Typography variant=\"h3\">No</Typography>}\n            </ChartCard>\n          </div>\n          <div key=\"gasPrice\">\n            <ChartCard title=\"Gas Price\">\n              <Typography variant=\"h3\">{weiToGwei(parseInt(gasPrice, 16))} Gwei</Typography>\n            </ChartCard>\n          </div>\n          <div key=\"hRate\">\n            <ChartCard title=\"Network Hash Rate\">\n              {block &&\n                <HashRate block={block} blockTime={config.blockTime}>\n                  {(hashRate: any) => <Typography variant=\"h3\">{hashRate} GH/s</Typography>}\n                </HashRate>\n              }\n            </ChartCard>\n          </div>\n          <div>\n            <ChartCard title=\"Peers\">\n              <Typography variant=\"h3\">{parseInt(peerCount, 16)}</Typography>\n            </ChartCard>\n          </div>\n        </Grid>\n        <Grid key=\"hashChart\" item={true} xs={12} sm={6} lg={3}>\n          <ChartCard title={`Hash Rate last ${blocks.length} blocks`}>\n            <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n              <VictoryLine data={blocks.map(blockMapHashRate)} />\n            </VictoryChart>\n          </ChartCard>\n        </Grid>\n        <Grid key=\"txChart\" item={true} xs={12} sm={6} lg={3}>\n          <ChartCard title={`Transaction count last ${blocks.length} blocks`}>\n            <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n              <VictoryBar data={blocks.map(blockMapTransactionCount)} />\n            </VictoryChart>\n          </ChartCard>\n        </Grid>\n        <Grid key=\"gasUsed\" item={true} xs={12} sm={6} lg={3}>\n          <ChartCard title={`Gas Used Last ${blocks.length} blocks`}>\n            <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n              <VictoryBar data={blocks.map(blockMapGasUsed)} />\n            </VictoryChart>\n          </ChartCard>\n        </Grid>\n        <Grid key=\"uncles\" item={true} xs={12} sm={6} lg={3}>\n          <ChartCard title={`Uncles Last ${blocks.length} blocks`}>\n            <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n              <VictoryBar data={blocks.map(blockMapUncles)} />\n            </VictoryChart>\n          </ChartCard>\n        </Grid>\n\n      </Grid>\n\n      <BlockCardListContainer from={Math.max(blockNumber - 3, 0)} to={blockNumber} />\n      <BlockListContainer from={Math.max((blockNumber - 3) - 11, 0)} to={blockNumber - 3} style={{marginTop: \"30px\"}} />\n\n    </div>\n  );\n};\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport { useBlockNumber } from \"../helpers\";\nimport BlockList from \"./BlockList\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function NodeView(props: any) {\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  if (!blockNumber) {\n    return (<CircularProgress />);\n  }\n  return (\n    <BlockList from={Math.max(blockNumber - 15, 0)} to={blockNumber}/>\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport interface ITxViewProps {\n  tx: any;\n  receipt: any | null;\n}\n\nfunction renderTxTable(tx: any, receipt: any | null) {\n  return (\n    <div>\n      <div>General</div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Hash</TableCell>\n            <TableCell>{tx.hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Block</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${tx.blockHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.blockHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Block number</TableCell>\n            <TableCell>{parseInt(tx.blockNumber, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Gas</TableCell>\n            <TableCell>{unit.fromWei(tx.gas, \"ether\")}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Gas Price</TableCell>\n            <TableCell>{parseInt(tx.gasPrice, 10)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Value</TableCell>\n            <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>From</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${tx.from}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.from}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>To</TableCell>\n            <TableCell>\n              {tx.to !== null ?\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${tx.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {tx.to}\n                </Link>\n                : null\n              }\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Nonce</TableCell>\n            <TableCell>{parseInt(tx.nonce, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Transaction Index</TableCell>\n            <TableCell>{parseInt(tx.transactionIndex, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Input</TableCell>\n            <TableCell>{tx.input}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>ReplayProtected</TableCell>\n            <TableCell>{tx.replayProtected && tx.replayProtected.toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>v</TableCell>\n            <TableCell>{tx.v}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>r</TableCell>\n            <TableCell>{tx.r}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>s</TableCell>\n            <TableCell>{tx.s}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <div>Receipt</div>\n      {receipt &&\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Hash</TableCell>\n              <TableCell>{receipt.transactionHash}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Block</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${receipt.blockHash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.blockHash}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Block number</TableCell>\n              <TableCell>{parseInt(receipt.blockNumber, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Gas Used</TableCell>\n              <TableCell>{parseInt(receipt.gasUsed, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Cumulative Gas Used</TableCell>\n              <TableCell>{parseInt(receipt.cumulativeGasUsed, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Value</TableCell>\n              <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>From</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.from}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.from}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>To</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.to}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Contract Address</TableCell>\n              <TableCell>{receipt.contractAddress}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Transaction Index</TableCell>\n              <TableCell>{parseInt(receipt.transactionIndex, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Status</TableCell>\n              <TableCell>{receipt.status}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Logs</TableCell>\n              <TableCell>\n                {receipt.logs.length}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      }\n    </div>\n  );\n}\n\nfunction TxView(props: ITxViewProps) {\n  const { tx, receipt } = props;\n  if (!tx) {\n    return null;\n  }\n\n  return renderTxTable(tx, receipt);\n}\n\nexport default TxView;\n","import TxView from \"./TxView\";\nexport default TxView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport TxView from \"../components/TxView\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function TransactionContainer(props: any) {\n  const hash = props.match.params.hash;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [transaction, setTransaction] = React.useState();\n  const [receipt, setReceipt] = React.useState();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionByHash(hash).then(setTransaction);\n  }, [hash, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionReceipt(hash).then(setReceipt);\n  }, [hash, erpc]);\n\n  if (!transaction || !receipt) {\n    return (<CircularProgress />);\n  }\n\n  return (<TxView tx={transaction} receipt={receipt} />);\n}\n","import * as React from \"react\";\nimport { IconButton, Menu, MenuItem, ListItemText, ListItemSecondaryAction, Input, ListItemIcon } from \"@material-ui/core\"; //tslint:disable-line\nimport { Settings, NavigateNext, NavigateBefore } from \"@material-ui/icons\";\n\ninterface IConfigurationMenuProps {\n  onChange: (type: string, url: string) => any;\n}\n\ninterface IPagedMenuProps {\n  onChange: (type: string, url: string) => any;\n}\n\nconst PagedMenu: React.FC<IPagedMenuProps> = (props) => {\n  const [selected, setSelected] = React.useState<\"service-runner\" | \"ethereum-rpc\" | null>(null);\n  const nameMap = {\n    \"service-runner\": \"Service Runner RPC\",\n    \"ethereum-rpc\": \"Ethereum RPC\",\n  };\n\n  if (selected) {\n    return (\n      <>\n        <MenuItem onClick={() => setSelected(null)}>\n          <ListItemIcon>\n            <NavigateBefore />\n          </ListItemIcon>\n          <ListItemText>\n            Back\n          </ListItemText>\n        </MenuItem>\n        <Input\n          onChange={(e) => props.onChange(selected, e.currentTarget.value)}\n          placeholder={`${nameMap[selected]} Url`}\n          fullWidth={true}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MenuItem onClick={() => setSelected(\"service-runner\")}>\n        <ListItemText>\n          Service Runner RPC\n          </ListItemText>\n        <ListItemSecondaryAction>\n          <NavigateNext />\n        </ListItemSecondaryAction>\n      </MenuItem>\n      <MenuItem onClick={() => setSelected(\"ethereum-rpc\")}>\n        <ListItemText>\n          Ethereum RPC\n          </ListItemText>\n        <ListItemSecondaryAction>\n          <NavigateNext />\n        </ListItemSecondaryAction>\n      </MenuItem>\n    </>\n  );\n\n};\n\nconst ConfigurationMenu: React.FC<IConfigurationMenuProps> = (props) => {\n  const [anchorEl, setAnchorEl] = React.useState<any>(null);\n  const open = !!anchorEl;\n\n  function handleMenu(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"Account of current user\"\n        aria-controls=\"menu-appbar\"\n        aria-haspopup=\"true\"\n        onClick={handleMenu}\n        color=\"inherit\"\n      >\n        <Settings />\n      </IconButton>\n      <Menu\n        id=\"menu-appbar\"\n        getContentAnchorEl={null}\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        PaperProps={{\n          style: {\n            width: \"250px\",\n          },\n        }}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n        onClose={handleClose}\n      >\n        <PagedMenu onChange={props.onChange}></PagedMenu>\n      </Menu>\n    </>\n  );\n};\n\nexport default ConfigurationMenu;\n","import ConfigurationMenu from \"./ConfigurationMenu\";\nexport default ConfigurationMenu;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import { AppBar, CssBaseline, Theme, Toolbar, Typography, IconButton, Grid } from \"@material-ui/core\"; //tslint:disable-line\nimport { makeStyles, ThemeProvider } from \"@material-ui/styles\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport * as React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport useDarkMode from \"use-dark-mode\";\nimport \"./App.css\";\nimport Address from \"./containers/Address\";\nimport Block from \"./containers/Block\";\nimport Dashboard from \"./containers/Dashboard\";\nimport NodeView from \"./containers/NodeView\";\nimport Transaction from \"./containers/Transaction\";\nimport ConfigurationMenu from \"./containers/ConfigurationMenu\";\nimport { darkTheme, lightTheme } from \"./themes/jadeTheme\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\n\nimport useInterval from \"use-interval\";\nimport useServiceRunnerStore from \"./stores/useServiceRunnerStore\";\nimport useMultiGethStore from \"./stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App(props: any) {\n  const darkMode = useDarkMode();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n\n  const [, , setServiceRunnerUrl] = useServiceRunnerStore();\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n\n  const classes = useStyles(theme);\n  const handleConfigurationChange = (type: string, url: string) => {\n    if (type === \"service-runner\") {\n      setServiceRunnerUrl(url);\n    }\n  };\n\n  React.useEffect(() => {\n    if (erpc) {\n      erpc.startBatch();\n    }\n  }, [erpc]);\n\n  useInterval(() => {\n    if (erpc) {\n      erpc.stopBatch();\n      erpc.startBatch();\n    }\n  }, 100, true);\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppBar color=\"default\" elevation={0}>\n          <Toolbar>\n            <Grid justify=\"space-between\" container>\n              <Grid item style={{marginTop: \"8px\"}}>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={\"/\"}>\n                      {children}\n                    </RouterLink>\n                  )}>\n                  <Grid container>\n                    {darkMode.value ?\n                      <img\n                        alt=\"jade-explorer\"\n                        height=\"30\"\n                        style={{ marginRight: \"5px\" }}\n                        src=\"https://github.com/etclabscore/jade-media-assets/blob/master/jade-logo-dark/jade-logo-dark%20(PNG)/32x32.png?raw=true\" //tslint:disable-line\n                      />\n                      :\n                      <img\n                        alt=\"jade-explorer\"\n                        height=\"30\"\n                        style={{ marginRight: \"5px\" }}\n                        src=\"https://github.com/etclabscore/jade-media-assets/blob/master/jade-logo-light/jade-logo-light%20(PNG)/32x32.png?raw=true\" //tslint:disable-line\n                      />\n                    }\n                    <Typography className={classes.title} color=\"textSecondary\" variant=\"h6\">Jade Explorer</Typography>\n                  </Grid>\n                </Link>\n              </Grid>\n              <Grid item>\n                <IconButton onClick={darkMode.toggle}>\n                  {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n                </IconButton>\n                <ConfigurationMenu onChange={handleConfigurationChange} />\n              </Grid>\n            </Grid>\n\n          </Toolbar>\n        </AppBar>\n        <div style={{ margin: \"0px 25px 0px 25px\" }}>\n          <Switch>\n            <Route path={\"/\"} component={Dashboard} exact={true} />\n            <Route path={\"/block/:hash\"} component={Block} />\n            <Route path={\"/blocks\"} component={NodeView} />\n            <Route path={\"/tx/:hash\"} component={Transaction} />\n            <Route path={\"/address/:address\"} component={Address} />\n          </Switch>\n        </div>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ReusableProvider } from \"reusable\";\n\nReactDOM.render(\n  <ReusableProvider>\n    <App />\n  </ReusableProvider>,\n  document.getElementById(\"root\") as HTMLElement,\n);\n"],"sourceRoot":""}