{"version":3,"sources":["components/AddressView/AddressView.tsx","components/AddressView/index.ts","erpc.ts","helpers.tsx","containers/Address.tsx","components/TxList/TxList.tsx","components/TxList/index.ts","components/BlockView/BlockView.tsx","components/BlockView/index.ts","components/formatters.ts","components/HashChart/index.ts","components/HashChart/HashChart.tsx","components/HashRate/index.ts","components/HashRate/HashRate.tsx","components/BlockList/BlockList.tsx","components/BlockList/index.ts","containers/BlockList.tsx","containers/Dashboard.tsx","components/TxView/TxView.tsx","components/TxView/index.ts","themes/jadeTheme.ts","App.tsx","containers/Block.tsx","containers/NodeView.tsx","containers/Transaction.tsx","index.tsx"],"names":["AddressView","props","react","address","balance","txCount","code","value","renderGeneral","serviceRunner","JadeServiceRunner","transport","host","port","type","serviceName","useMultiGeth","version","env","_React$useState","React","_React$useState2","Object","slicedToArray","erpc","setErpc","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","service","wrap","_context","prev","next","installService","sent","abrupt","startService","ERPC","parseInt","rpcPort","stop","apply","this","arguments","runAsync","useBlockNumber","blockNumber","setBlockNumber","useInterval","eth_blockNumber","then","bn","getBlocks","from","to","promises","i","push","eth_getBlockByNumber","concat","toString","Promise","all","unit","require","TxListItem","tx","TableRow","TableCell","Link_Link","component","_ref2","className","children","Link","hash","_ref3","_ref4","transactionIndex","TxList","Table","TableHead","TableBody","transactions","map","key","BlockView","block","timestamp","parentHash","miner","nonce","difficulty","extraData","stateRoot","transactionsRoot","receiptsRoot","number","Date","components_TxList","hashesToGH","hashes","dividedBy","toNumber","toFixed","HashChart","title","data","width","height","victory_chart","name","victory_label","x","y","text","victory_line","HashRate","blockTime","BigNumber","rightPaddingFix","paddingRight","BlockList","blocks","sortedBlocks","sort","b","Typography","scope","style","toISOString","length","BlockListContainer","_useMultiGeth","setBlocks","components_BlockList","CircularProgress","useState","config","blockMapGasUsed","gasUsed","blockMapUncles","uncles","blockMapHashRate","blockMapTransactionCount","TxView","receipt","blockHash","fromWei","gas","gasPrice","input","replayProtected","v","r","s","transactionHash","cumulativeGasUsed","_ref5","_ref6","contractAddress","status","logs","renderTxTable","lightTheme","createMuiTheme","overrides","MuiAppBar","root","background","palette","default","darkTheme","paper","MuiTable","MuiTypography","color","routes","path","wei","styles","topItems","display","justifyContent","alignItems","_useBlockNumber","_useState","_useState2","chainId","setChainId","_useState3","_useState4","setBlock","_useState5","_useState6","_useState7","_useState8","setGasPrice","_useState9","_useState10","syncing","setSyncing","_useState11","_useState12","peerCount","setPeerCount","eth_chainId","undefined","Math","max","bl","eth_syncing","net_peerCount","eth_gasPrice","Grid","container","spacing","item","xs","variant","currentBlock","highestBlock","components_HashRate","hashRate","sm","lg","components_HashChart","victory_bar","Button","href","exact","match","params","eth_getBlockByHash","components_BlockView","transaction","setTransaction","_React$useState3","_React$useState4","setReceipt","eth_getTransactionByHash","eth_getTransactionReceipt","components_TxView","transactionCount","setTransactionCount","setBalance","_React$useState5","_React$useState6","setCode","hexBlockNumber","eth_getTransactionCount","eth_getBalance","eth_getCode","components_AddressView","useStyles","makeStyles","theme","flexGrow","App","darkMode","useDarkMode","classes","ThemeProvider","CssBaseline","AppBar","position","elevation","Toolbar","IconButton","onClick","toggle","Brightness3_default","WbSunny_default","BrowserRouter","Switch","routeProps","Route","p","Card","CardHeader","CardContent","objectSpread","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b362b3de.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport interface AddressViewProps {\n  address: string;\n  balance: string;\n  txCount: number;\n  code: string;\n}\n\nfunction renderGeneral(props: AddressViewProps) {\n  const { address, balance, txCount, code } = props;\n  return (\n    <div>\n      <div>Balance: {balance}</div>\n      <div>Tx count: {txCount}</div>\n      <div>{address}</div>\n      <div>Code</div>\n      <div>\n        <textarea value={code} />\n      </div>\n    </div>\n  );\n}\n\nfunction AddressView(props: AddressViewProps) {\n  return (\n    <React.Fragment>\n        {renderGeneral(props)}\n    </React.Fragment>\n  );\n}\n\nexport default AddressView;\n","import AddressView from './AddressView';\nexport default AddressView;","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport * as React from \"react\";\n\nconst serviceRunner = new JadeServiceRunner({\n    transport: {\n        host: \"localhost\",\n        port: 8002,\n        type: \"http\",\n    },\n});\n\nconst serviceName = \"multi-geth\";\n\nfunction useMultiGeth(version: string, env: string): [ERPC] {\n    const [erpc, setErpc] = React.useState();\n    React.useEffect(() => {\n        const runAsync = async () => {\n            const installed = await serviceRunner.installService(serviceName, version);\n            if (!installed ) { return; }\n            const service = await serviceRunner.startService(serviceName, version, env);\n            setErpc(new ERPC({\n                transport: {\n                    type: \"http\",\n                    host: \"localhost\",\n                    port: parseInt(service.rpcPort, 10),\n                },\n            }));\n        };\n        runAsync();\n    }, [version, env]);\n    return [erpc];\n}\n\nexport default useMultiGeth;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport * as React from \"react\";\nimport useInterval from \"use-interval\";\n\nexport const getBlocks = (from: number, to: number, erpc: ERPC): Promise<any> => {\n    const promises: any[] = [];\n    for (let i = from; i < to; i++) {\n        promises.push(erpc.eth_getBlockByNumber(`0x${i.toString(16)}`, true));\n    }\n    return Promise.all(promises);\n};\n\nexport const useBlockNumber = (erpc: ERPC) => {\n    const [blockNumber, setBlockNumber] = React.useState();\n    useInterval(() => {\n        if (!erpc) {\n            return;\n        }\n        erpc.eth_blockNumber().then((bn: string) => {\n            setBlockNumber(parseInt(bn, 16));\n        });\n    }, 1000, true);\n    return [blockNumber];\n};\n\nexport default getBlocks;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport AddressView from \"../components/AddressView\";\nimport useMultiGeth from \"../erpc\";\nimport { useBlockNumber } from \"../helpers\";\n\nconst unit = require(\"ethjs-unit\");\n\nexport default function Address({ match }: { match: { params: { address: string } } }) {\n  const { address } = match.params;\n  const [erpc] = useMultiGeth(\"1.9.0\", \"mainnet\");\n  const [blockNumber] = useBlockNumber(erpc);\n  const [transactionCount, setTransactionCount] = React.useState();\n  const [balance, setBalance] = React.useState();\n  const [code, setCode] = React.useState();\n\n  React.useEffect(() => {\n    if (blockNumber === undefined || !erpc) {\n      return;\n    }\n    const hexBlockNumber = `0x${blockNumber.toString(16)}`;\n    erpc.eth_getTransactionCount(address, hexBlockNumber).then(setTransactionCount);\n    erpc.eth_getBalance(address, hexBlockNumber).then(setBalance);\n    erpc.eth_getCode(address, hexBlockNumber).then(setCode);\n  }, [blockNumber, address, erpc]);\n\n  if (transactionCount === undefined || balance === undefined || code === undefined) {\n    return <CircularProgress />;\n  }\n  return (\n    <>\n      <AddressView\n        address={address}\n        txCount={transactionCount ? parseInt(transactionCount, 10) : 0}\n        balance={unit.fromWei(balance || 0, \"ether\")}\n        code={code}\n      />\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\n\nimport { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\n\nexport interface ITxListProps {\n  transactions: any[];\n}\n\nfunction TxListItem({ tx }: { tx: any }) {\n  return (\n    <TableRow>\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/tx/${tx.hash}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.hash}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/address/${tx.from}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.from}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        {tx.to !== null ?\n          <Link\n            component={({ className, children }: { children: any, className: string }) => (\n              <RouterLink className={className} to={`/address/${tx.to}`} >\n                {children}\n              </RouterLink>\n            )}>\n            {tx.to}\n          </Link>\n          : null}\n      </TableCell>\n\n      <TableCell>{parseInt(tx.transactionIndex, 16)}</TableCell>\n    </TableRow>\n  );\n}\n\nfunction TxList(props: ITxListProps) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Hash</TableCell>\n          <TableCell>From</TableCell>\n          <TableCell>To</TableCell>\n          <TableCell>Index</TableCell>\n        </TableRow>\n      </TableHead>\n\n      <TableBody>\n        {props.transactions.map((tx: any) => <TxListItem key={tx.hash} tx={tx} />)}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default TxList;\n","import TxList from './TxList';\nexport default TxList;","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport TxList from \"../TxList\";\n\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\n\nfunction BlockView(props: any) {\n  const { block } = props;\n\n  if (!block) {\n    return (<div>Loading...</div>);\n  }\n\n  const {\n    timestamp, hash, parentHash, miner, nonce, difficulty,\n    extraData, stateRoot, transactionsRoot, receiptsRoot, transactions,\n  } = block;\n\n  return (\n    <div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Number</TableCell>\n            <TableCell>{parseInt(block.number, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Timestamp</TableCell>\n            <TableCell>{new Date(parseInt(timestamp, 16) * 1000).toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Hash</TableCell>\n            <TableCell>{hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>ParentHash</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${parentHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {parentHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Miner</TableCell>\n            <TableCell>\n              {miner}\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Nonce</TableCell>\n            <TableCell>{nonce}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Difficulty</TableCell>\n            <TableCell>{difficulty.toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Extra Data</TableCell>\n            <TableCell>{extraData}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>State Root</TableCell>\n            <TableCell>{stateRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Transaction Root</TableCell>\n            <TableCell>{transactionsRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Receipts Root</TableCell>\n            <TableCell>{receiptsRoot}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <TxList transactions={transactions} />\n    </div>\n  );\n}\n\nexport default BlockView;\n","import BlockView from './BlockView';\nexport default BlockView;","import BigNumber from \"bignumber.js\";\n\nexport function hashesToGH(hashes: BigNumber) {\n  return parseInt((hashes.dividedBy(1000000000).toNumber()).toFixed(2), 10);\n}\n\nexport function weiToGwei(wei: any) {\n  if (wei === 0) {\n    return wei;\n  }\n\n  return wei / 1000000000;\n}\n","import HashChart from './HashChart';\nexport default HashChart;","import * as React from \"react\";\nimport { VictoryChart, VictoryLabel, VictoryLine } from \"victory\";\n\nexport default function HashChart(props: any) {\n  const { title, data, width, height } = props;\n\n  return (\n    <VictoryChart name={title} height={height} width={width}>\n      <VictoryLabel x={25} y={24} text={title}/>\n      <VictoryLine data={data} height={height} width={width}/>\n    </VictoryChart>\n  );\n}\n","import HashRate from './HashRate';\nexport default HashRate;","import BigNumber from \"bignumber.js\";\nimport { hashesToGH } from \"../formatters\";\n\nexport default function HashRate(props: any) {\n  const { block, blockTime } = props;\n  return props.children(hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(blockTime)));\n}\n","import { Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst rightPaddingFix = {\n  paddingRight: \"24px\",\n};\n\nfunction BlockList({ blocks }: any) {\n  if (!blocks) {\n    return null;\n  }\n  const sortedBlocks = blocks.sort((a: { number: number }, b: { number: number }) => {\n    return b.number - a.number;\n  });\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell><Typography>#</Typography></TableCell>\n          <TableCell><Typography>Hash</Typography></TableCell>\n          <TableCell><Typography>Timestamp</Typography></TableCell>\n          <TableCell><Typography>Txs</Typography></TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {sortedBlocks.map((b: any) => {\n          return (\n            <TableRow key={b.number}>\n              <TableCell component=\"th\" scope=\"row\"><Typography>{parseInt(b.number, 16)}</Typography></TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${b.hash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {b.hash}\n                </Link>\n              </TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Typography>{new Date(parseInt(b.timestamp, 16) * 1000).toISOString()}</Typography>\n              </TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Typography>{b.transactions.length}</Typography>\n              </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default BlockList;\n","import BlockList from './BlockList';\nexport default BlockList;","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport BlockList from \"../components/BlockList\";\nimport useMultiGeth from \"../erpc\";\nimport getBlocks from \"../helpers\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  erpc: ERPC;\n}\n\nexport default function BlockListContainer(props: IProps) {\n  const { from, to } = props;\n  const [erpc] = useMultiGeth(\"1.9.0\", \"mainnet\");\n  const [blocks, setBlocks] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then(setBlocks);\n  }, [from, to, erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <div>\n      Blocks from {from} to {to}\n      <BlockList blocks={blocks} />\n    </div>\n  );\n}\n","import { Button, Grid, Typography, CircularProgress } from \"@material-ui/core\";\nimport BigNumber from \"bignumber.js\";\nimport * as React from \"react\";\nimport { VictoryBar, VictoryChart, VictoryLabel } from \"victory\";\nimport { hashesToGH, weiToGwei } from \"../components/formatters\";\nimport HashChart from \"../components/HashChart\";\nimport HashRate from \"../components/HashRate\";\nimport useMultiGeth from \"../erpc\";\nimport getBlocks, { useBlockNumber } from \"../helpers\";\nimport BlockList from \"./BlockList\";\nimport useInterval from \"use-interval\";\n\nconst useState = React.useState;\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\n\nconst blockMapGasUsed = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: new BigNumber(block.gasUsed).dividedBy(1000000),\n  };\n};\n\nconst blockMapUncles = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: block.uncles.length,\n  };\n};\n\nconst blockMapHashRate = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(config.blockTime)),\n  };\n};\n\nconst blockMapTransactionCount = (block: any) => {\n  return {\n    x: parseInt(block.number, 16),\n    y: block.transactions.length,\n  };\n};\n\nconst getStyles = () => {\n  return {\n    topItems: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n    },\n  };\n};\n\nexport default (props: any) => {\n  const styles = getStyles();\n  const [erpc] = useMultiGeth(\"1.9.0\", \"mainnet\");\n  const [blockNumber] = useBlockNumber(erpc);\n  const [chainId, setChainId] = useState();\n  const [block, setBlock] = useState();\n  const [blocks, setBlocks] = useState();\n  const [gasPrice, setGasPrice] = useState();\n  const [syncing, setSyncing] = useState();\n  const [peerCount, setPeerCount] = useState();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_chainId().then(setChainId);\n  }, [chainId, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === undefined) { return; }\n    erpc.eth_getBlockByNumber(`0x${blockNumber.toString(16)}`, true).then(setBlock);\n  }, [blockNumber, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === null) { return; }\n    getBlocks(\n      Math.max(blockNumber - config.blockHistoryLength + 1, 0),\n      blockNumber,\n      erpc,\n    ).then((bl) => {\n      setBlocks(bl);\n    });\n  }, [blockNumber, erpc]);\n\n  useInterval(() => {\n    if (!erpc) { return; }\n    \n    erpc.eth_syncing().then(setSyncing);\n  }, 10000, true);\n\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.net_peerCount().then(setPeerCount);\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_gasPrice().then(setGasPrice);\n  }, [erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <div>\n      <Grid container={true} spacing={3}>\n        <Grid style={styles.topItems} item={true} xs={12}>\n          <div key=\"blockHeight\">\n            <Typography variant=\"h6\">\n              Block Height\n            </Typography>\n            <Typography>{blockNumber}</Typography>\n          </div>\n          <div key=\"chainId\">\n            <Typography variant=\"h6\">\n              Chain ID\n            </Typography>\n            <Typography>{parseInt(chainId, 16)}</Typography>\n          </div>\n          <div key=\"syncing\">\n            <Typography variant=\"h6\">\n              Syncing\n            </Typography>\n            {typeof syncing === \"object\" && syncing.currentBlock &&\n              <Typography variant=\"h6\">\n                {parseInt(syncing.currentBlock, 16)} / {parseInt(syncing.highestBlock || \"0x0\", 16)}\n              </Typography>\n            }\n            {!syncing && <Typography>No</Typography>}\n          </div>\n          <div key=\"gasPrice\">\n            <Typography variant=\"h6\">\n              Gas Price\n            </Typography>\n            <Typography>{weiToGwei(parseInt(gasPrice, 16))} Gwei</Typography>\n          </div>\n          <div key=\"hRate\">\n            <Typography variant=\"h6\">\n              Network Hash Rate\n            </Typography>\n            {block &&\n              <HashRate block={block} blockTime={config.blockTime}>\n                {(hashRate: any) => <Typography>{hashRate} GH/s</Typography>}\n              </HashRate>\n            }\n          </div>\n          <div>\n            <Typography variant=\"h6\">\n              Peers\n            </Typography>\n            <Typography>{parseInt(peerCount, 16)}</Typography>\n          </div>\n        </Grid>\n        <Grid key=\"hashChart\" item={true} xs={12} sm={6} lg={3}>\n          <HashChart\n            height={config.chartHeight}\n            title={`Hash Rate Last ${blocks.length} blocks`}\n            data={blocks.map(blockMapHashRate)} />\n        </Grid>\n        <Grid key=\"txChart\" item={true} xs={12} sm={6} lg={3}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth}>\n            <VictoryLabel x={25} y={24} text={`Transaction count last ${blocks.length} blocks`} />\n            <VictoryBar data={blocks.map(blockMapTransactionCount)} />\n          </VictoryChart>\n        </Grid>\n        <Grid key=\"gasUsed\" item={true} xs={12} sm={6} lg={3}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth}>\n            <VictoryLabel x={25} y={24} text={`Gas Used Last ${blocks.length} blocks`} />\n            <VictoryBar data={blocks.map(blockMapGasUsed)} />\n          </VictoryChart>\n        </Grid>\n        <Grid key=\"uncles\" item={true} xs={12} sm={6} lg={3}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth}>\n            <VictoryLabel x={25} y={24} text={`Uncles Last ${blocks.length} blocks`} />\n            <VictoryBar data={blocks.map(blockMapUncles)} />\n          </VictoryChart>\n        </Grid>\n\n        <Grid item={true} key={\"blocks\"}>\n          <Button href={\"/blocks\"}>View All Blocks</Button>\n          <BlockList from={Math.max(blockNumber - 11, 0)} to={blockNumber} erpc={erpc} />\n        </Grid>\n\n      </Grid>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\n\nconst unit = require(\"ethjs-unit\");\n\nexport interface ITxViewProps {\n  tx: any;\n  receipt: any | null;\n}\n\nfunction renderTxTable(tx: any, receipt: any | null) {\n  return (\n    <div>\n      <div>General</div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Hash</TableCell>\n            <TableCell>{tx.hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Block</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${tx.blockHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.blockHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Block number</TableCell>\n            <TableCell>{parseInt(tx.blockNumber, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Gas</TableCell>\n            <TableCell>{unit.fromWei(tx.gas, \"ether\")}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Gas Price</TableCell>\n            <TableCell>{parseInt(tx.gasPrice, 10)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Value</TableCell>\n            <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>From</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${tx.from}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.from}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>To</TableCell>\n            <TableCell>\n              {tx.to !== null ?\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${tx.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {tx.to}\n                </Link>\n                : null\n              }\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Nonce</TableCell>\n            <TableCell>{parseInt(tx.nonce, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Transaction Index</TableCell>\n            <TableCell>{parseInt(tx.transactionIndex, 16)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Input</TableCell>\n            <TableCell>{tx.input}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>ReplayProtected</TableCell>\n            <TableCell>{tx.replayProtected && tx.replayProtected.toString()}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>v</TableCell>\n            <TableCell>{tx.v}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>r</TableCell>\n            <TableCell>{tx.r}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>s</TableCell>\n            <TableCell>{tx.s}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <div>Receipt</div>\n      {receipt &&\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Hash</TableCell>\n              <TableCell>{receipt.transactionHash}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Block</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${receipt.blockHash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.blockHash}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Block number</TableCell>\n              <TableCell>{parseInt(receipt.blockNumber, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Gas Used</TableCell>\n              <TableCell>{parseInt(receipt.gasUsed, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Cumulative Gas Used</TableCell>\n              <TableCell>{parseInt(receipt.cumulativeGasUsed, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Value</TableCell>\n              <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>From</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.from}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.from}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>To</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.to}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Contract Address</TableCell>\n              <TableCell>{receipt.contractAddress}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Transaction Index</TableCell>\n              <TableCell>{parseInt(receipt.transactionIndex, 16)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Status</TableCell>\n              <TableCell>{receipt.status}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Logs</TableCell>\n              <TableCell>\n                <textarea>{receipt.logs}</textarea>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      }\n    </div>\n  );\n}\n\nfunction TxView(props: ITxViewProps) {\n  const { tx, receipt } = props;\n  if (!tx) {\n    return null;\n  }\n\n  return renderTxTable(tx, receipt);\n}\n\nexport default TxView;\n","import TxView from './TxView';\nexport default TxView;","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const lightTheme = createMuiTheme({\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    background: {\n      default: \"#212121\",\n      paper: \"black\",\n    },\n  },\n  overrides: {\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: \"#fff\",\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import { AppBar, Card, CardContent, CardHeader, CssBaseline, Theme, Toolbar, Typography, IconButton } from \"@material-ui/core\"; //tslint:disable-line\nimport { makeStyles, ThemeProvider } from \"@material-ui/styles\";\nimport * as React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport useDarkMode from \"use-dark-mode\";\nimport \"./App.css\";\nimport Address from \"./containers/Address\";\nimport Block from \"./containers/Block\";\nimport Dashboard from \"./containers/Dashboard\";\nimport NodeView from \"./containers/NodeView\";\nimport Transaction from \"./containers/Transaction\";\nimport { darkTheme, lightTheme } from \"./themes/jadeTheme\";\n\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\n\nconst routes = [\n  { path: \"/\", component: Dashboard, title: \"Dashboard\", exact: true },\n  { path: \"/block/:hash\", component: Block, title: \"Block\" },\n  { path: \"/blocks\", component: NodeView, title: \"Latest Blocks\" },\n  { path: \"/tx/:hash\", component: Transaction, title: \"Transaction Details\" },\n  { path: \"/address/:address\", component: Address, title: \"Address Details\" },\n];\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App(props: any) {\n  const darkMode = useDarkMode();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n  const classes = useStyles(theme);\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"static\" color=\"default\" elevation={0}>\n        <Toolbar>\n          <Typography className={classes.title}>Jade Block Explorer</Typography>\n          <IconButton onClick={darkMode.toggle}>\n            {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Router>\n        <Switch>\n          {\n            routes.map((routeProps, i) => (\n              <Route key={routeProps.path} path={routeProps.path} component={(p: any) => (\n                <Card>\n                  <CardHeader title={routeProps.title} />\n                  <CardContent>\n                    {routeProps.component({ ...p })}\n                  </CardContent>\n                </Card>\n              )} exact={routeProps.exact} />\n            ))\n          }\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport BlockView from \"../components/BlockView\";\nimport useMultiGeth from \"../erpc\";\n\nexport default function Block(props: any) {\n  const { match: { params: { hash } } } = props;\n  const [erpc] = useMultiGeth(\"1.9.0\", \"mainnet\");\n  const [block, setBlock] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getBlockByHash(hash, true).then(setBlock);\n  }, [hash, erpc]);\n  if (!block) { return (<CircularProgress />); }\n  return (<BlockView block={block} />);\n}\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport useMultiGeth from \"../erpc\";\nimport { useBlockNumber } from \"../helpers\";\nimport BlockList from \"./BlockList\";\n\nexport default function NodeView(props: any) {\n  const [erpc] = useMultiGeth(\"1.9.0\", \"mainnet\");\n  const [blockNumber] = useBlockNumber(erpc);\n  if (!blockNumber) {\n    return (<CircularProgress />);\n  }\n  return (\n    <BlockList from={Math.max(blockNumber - 15, 0)} to={blockNumber} erpc={erpc}/>\n  );\n}\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport TxView from \"../components/TxView\";\nimport useMultiGeth from \"../erpc\";\n\nexport default function TransactionContainer(props: any) {\n  const hash = props.match.params.hash;\n  const [erpc] = useMultiGeth(\"1.9.0\", \"mainnet\");\n  const [transaction, setTransaction] = React.useState();\n  const [receipt, setReceipt] = React.useState();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionByHash(hash).then(setTransaction);\n  }, [hash, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionReceipt(hash).then(setReceipt);\n  }, [hash, erpc]);\n\n  if (!transaction || !receipt) {\n    return (<CircularProgress />);\n  }\n\n  return (<TxView tx={transaction} receipt={receipt} />);\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\") as HTMLElement,\n);\n"],"sourceRoot":""}