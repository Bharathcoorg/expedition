{"version":3,"sources":["helpers/hexToString.ts","components/AddressView/AddressView.tsx","components/AddressView/index.ts","helpers/hexToNumber.ts","helpers.tsx","hooks/useMultiGeth.ts","hooks/useServiceRunner.ts","stores/useServiceRunnerStore.ts","hooks/useQueryParams.ts","stores/useMultiGethStore.ts","containers/Address.tsx","components/TxList/TxList.tsx","components/TxList/index.ts","helpers/hexToDate.ts","components/BlockView/BlockView.tsx","components/BlockView/index.ts","containers/Block.tsx","components/formatters.ts","components/HashRate/index.ts","components/HashRate/HashRate.tsx","themes/victoryTheme.ts","components/ChartCard.tsx","components/BlockCard/index.ts","components/BlockCard/BlockCard.tsx","containers/BlockCardList.tsx","components/BlockList/BlockList.tsx","components/BlockList/index.ts","containers/BlockList.tsx","containers/Dashboard.tsx","containers/NodeView.tsx","components/TxView/TxView.tsx","components/TxView/index.ts","containers/Transaction.tsx","containers/ConfigurationMenu/ConfigurationMenu.tsx","containers/ConfigurationMenu/index.ts","themes/jadeTheme.ts","App.tsx","index.tsx"],"names":["hexToString","hex","Buffer","substring","toString","AddressView","props","address","balance","txCount","code","Card","CardContent","Typography","variant","renderGeneral","hexToNumber","parseInt","useBlockNumber","erpc","React","blockNumber","setBlockNumber","eth_blockNumber","then","bn","useInterval","getBlocks","from","to","promises","i","push","eth_getBlockByNumber","Promise","all","serviceName","useMultiGeth","serviceRunner","serviceRunnerUrl","version","env","queryUrlOverride","useState","setErpc","process","REACT_APP_ETH_RPC_URL","urlOverride","setUrlOverride","useEffect","a","installService","startService","parsedUrl","URL","protocol","split","fallbackPort","port","rpc","ERPC","transport","host","hostname","type","path","pathname","runAsync","useServiceRunner","defaultUrl","url","setUrl","setServiceRunner","e","JadeServiceRunner","createStore","useQueryParams","qs","window","location","search","ignoreQueryPrefix","depth","decoder","str","test","parseFloat","decodeURIComponent","useServiceRunnerStore","queryParams","rpcUrl","unit","require","Address","match","params","useMultiGethStore","transactionCount","setTransactionCount","setBalance","setCode","undefined","hexBlockNumber","eth_getTransactionCount","eth_getBalance","eth_getCode","CircularProgress","fromWei","TxListItem","tx","TableRow","TableCell","Link","component","className","children","hash","transactionIndex","TxList","Table","TableHead","TableBody","transactions","map","key","hexToDate","hexTimestamp","moment","Date","toISOString","format","BlockView","block","timestamp","parentHash","miner","nonce","difficulty","extraData","stateRoot","transactionsRoot","receiptsRoot","number","Block","setBlock","eth_getBlockByHash","hashesToGH","hashes","dividedBy","toNumber","toFixed","HashRate","blockTime","BigNumber","baseLabelStyles","fontFamily","fontSize","letterSpacing","padding","fill","grey","stroke","strokeWidth","centeredLabelStyles","textAnchor","getTheme","theme","axis","style","axisLabel","grid","ticks","tickLabels","line","data","palette","primary","main","labels","bar","ChartCard","background","title","BlockCard","elevation","CardHeader","gutterBottom","Chip","label","length","BlockCardListContainer","blocks","setBlocks","Grid","container","spacing","sort","b","item","xs","sm","rightPaddingFix","paddingRight","BlockList","sortedBlocks","scope","BlockListContainer","config","blockMapGasUsed","x","y","gasUsed","blockMapUncles","uncles","blockMapHashRate","blockMapTransactionCount","wei","styles","topItems","display","justifyContent","alignItems","useTheme","victoryTheme","chainId","setChainId","gasPrice","setGasPrice","syncing","setSyncing","peerCount","setPeerCount","pendingTransctionsLength","setPendingTransactionsLength","eth_pendingTransactions","p","eth_chainId","Math","max","bl","eth_syncing","net_peerCount","eth_gasPrice","currentBlock","highestBlock","hashRate","lg","height","width","marginTop","NodeView","TxView","receipt","blockHash","gas","value","input","v","r","s","transactionHash","cumulativeGasUsed","contractAddress","status","logs","renderTxTable","TransactionContainer","transaction","setTransaction","setReceipt","eth_getTransactionByHash","eth_getTransactionReceipt","PagedMenu","selected","setSelected","MenuItem","onClick","ListItemIcon","NavigateBefore","ListItemText","Input","onChange","currentTarget","placeholder","fullWidth","ListItemSecondaryAction","NavigateNext","ConfigurationMenu","anchorEl","setAnchorEl","open","Tooltip","IconButton","aria-label","aria-controls","aria-haspopup","event","color","Menu","id","getContentAnchorEl","keepMounted","PaperProps","anchorOrigin","vertical","horizontal","transformOrigin","onClose","lightTheme","createMuiTheme","MuiAppBar","position","MuiCard","overrides","root","default","darkTheme","paper","MuiTable","MuiTypography","history","createHistory","useStyles","makeStyles","App","darkMode","useDarkMode","setSearch","setServiceRunnerUrl","setMultiGethUrlOverride","classes","startBatch","stopBatch","isAddress","query","RegExp","ETHJSONSpec","components","schemas","pattern","isKeccakHash","Keccak","isBlockNumber","handleSearch","Router","ThemeProvider","CssBaseline","AppBar","Toolbar","justify","alignContent","direction","alt","marginRight","src","InputBase","onKeyDown","keyCode","trim","target","borderRadius","toggle","margin","Switch","Route","Dashboard","exact","Transaction","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5b650988.chunk.js","sourcesContent":["const hexToString = (hex: string) => {\n  return new Buffer(hex.substring(2), \"hex\").toString();\n};\n\nexport default hexToString;\n","import * as React from \"react\";\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\n\nexport interface IAddressViewProps {\n  address: string;\n  balance: string;\n  txCount: number;\n  code: string;\n}\n\nfunction renderGeneral(props: IAddressViewProps) {\n  const { address, balance, txCount, code } = props;\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\">Address: {address}</Typography>\n        <Typography variant=\"h6\">Balance: {balance}</Typography>\n        <Typography variant=\"h6\">Transactions: {txCount}</Typography>\n        <br />\n        <div>\n          <div>Code</div>\n          <pre>\n            <code>{code}</code>\n          </pre>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction AddressView(props: IAddressViewProps) {\n  return (\n    <React.Fragment>\n      {renderGeneral(props)}\n    </React.Fragment>\n  );\n}\n\nexport default AddressView;\n","import AddressView from \"./AddressView\";\nexport default AddressView;\n","const hexToNumber = (hex: string) => {\n  return parseInt(hex, 16);\n};\n\nexport default hexToNumber;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport * as React from \"react\";\nimport useInterval from \"use-interval\";\nimport hexToNumber from \"./helpers/hexToNumber\";\n\nexport const getBlocks = (from: number, to: number, erpc: ERPC): Promise<any> => {\n  const promises: any[] = [];\n  for (let i = from; i < to; i++) {\n    promises.push(erpc.eth_getBlockByNumber(`0x${i.toString(16)}`, true));\n  }\n  return Promise.all(promises);\n};\n\nexport const useBlockNumber = (erpc: ERPC | undefined) => {\n  const [blockNumber, setBlockNumber] = React.useState();\n  if (erpc) {\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(hexToNumber(bn));\n    });\n  }\n  useInterval(() => {\n    if (!erpc) {\n      return;\n    }\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(hexToNumber(bn));\n    });\n  }, 7000);\n  return [blockNumber];\n};\n\nexport default getBlocks;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport React, { useState, Dispatch } from \"react\";\n\nconst serviceName = \"multi-geth\";\n\nfunction useMultiGeth(\n  serviceRunner: JadeServiceRunner | undefined,\n  serviceRunnerUrl: string,\n  version: string,\n  env: string,\n  queryUrlOverride?: string,\n): [ERPC, Dispatch<string>] {\n  const [erpc, setErpc] = React.useState();\n  const [urlOverride, setUrlOverride] = useState(process.env.REACT_APP_ETH_RPC_URL);\n  React.useEffect(() => {\n    if (!serviceRunner) {\n      return;\n    }\n    const runAsync = async () => {\n      const installed = await serviceRunner.installService(serviceName, version);\n      if (!installed) {\n        return;\n      }\n      await serviceRunner.startService(serviceName, version, env);\n      let parsedUrl;\n      try {\n        parsedUrl = new URL(queryUrlOverride || urlOverride || `${serviceRunnerUrl}/${serviceName}/${env}/${version}`);\n      } catch (e) {\n        return;\n      }\n      let rpc;\n      try {\n        const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n        const fallbackPort = protocol === \"http\" ? 80 : 443;\n        const port = parseInt(parsedUrl.port, 10);\n        rpc = new ERPC({\n          transport: {\n            host: parsedUrl.hostname,\n            port: port ? port : fallbackPort,\n            type: protocol,\n            path: parsedUrl.pathname,\n          },\n        });\n      } catch (e) {\n        return;\n      }\n      if (rpc) {\n        setErpc(rpc);\n      }\n    };\n    runAsync();\n  }, [serviceRunner, serviceRunnerUrl, version, env, urlOverride, queryUrlOverride]);\n  return [erpc, setUrlOverride];\n}\n\nexport default useMultiGeth;\n","import JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport React, { Dispatch } from \"react\";\n\nfunction useServiceRunner(defaultUrl: string): [JadeServiceRunner | undefined, string, Dispatch<string>] {\n  const [url, setUrl] = React.useState(defaultUrl);\n  const [serviceRunner, setServiceRunner] = React.useState<JadeServiceRunner | undefined>();\n  React.useEffect(() => {\n    if (!url) {\n      return;\n    }\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (e) {\n      return;\n    }\n    let rpc;\n    try {\n      const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n      const fallbackPort = protocol === \"http\" ? 80 : 443;\n      const port = parseInt(parsedUrl.port, 10);\n      rpc = new JadeServiceRunner({\n        transport: {\n          host: parsedUrl.hostname,\n          port: port ? port : fallbackPort,\n          type: protocol,\n        },\n      });\n    } catch (e) {\n      return;\n    }\n    if (rpc) {\n      setServiceRunner(rpc);\n    }\n  }, [url]);\n  return [serviceRunner, url, setUrl];\n}\n\nexport default useServiceRunner;\n","import { createStore } from \"reusable\";\nimport useServiceRunner from \"../hooks/useServiceRunner\";\nexport default createStore(() => useServiceRunner(process.env.REACT_APP_SERVICE_RUNNER_URL || \"http://localhost:8002\"));\n","import { useState } from \"react\";\nimport * as qs from \"qs\";\n\nconst useQueryParams = () => {\n  const parse = () => {\n    return qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n      depth: 100,\n      decoder(str) {\n        if (/^(\\d+|\\d*\\.\\d+)$/.test(str)) {\n          return parseFloat(str);\n        }\n        if (str === \"false\") {\n          return false;\n        }\n        if (str === \"true\") {\n          return true;\n        }\n        return decodeURIComponent(str);\n      },\n    });\n  };\n  const [query] = useState(parse());\n  return [query];\n};\n\nexport default useQueryParams;\n","import { createStore } from \"reusable\";\nimport useMultiGeth from \"../hooks/useMultiGeth\";\nimport useServiceRunnerStore from \"./useServiceRunnerStore\";\nimport useQueryParams from \"../hooks/useQueryParams\";\n\nexport default createStore(() => {\n  const [serviceRunner, serviceRunnerUrl] = useServiceRunnerStore();\n  const [queryParams] = useQueryParams();\n  return useMultiGeth(serviceRunner, serviceRunnerUrl, \"1.9.2\", \"mainnet\", queryParams.rpcUrl);\n});\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport AddressView from \"../components/AddressView\";\nimport { useBlockNumber } from \"../helpers\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport hexToNumber from \"../helpers/hexToNumber\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport default function Address({ match }: { match: { params: { address: string } } }) {\n  const { address } = match.params;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  const [transactionCount, setTransactionCount] = React.useState();\n  const [balance, setBalance] = React.useState();\n  const [code, setCode] = React.useState();\n\n  React.useEffect(() => {\n    if (blockNumber === undefined || !erpc) {\n      return;\n    }\n    const hexBlockNumber = `0x${blockNumber.toString(16)}`;\n    erpc.eth_getTransactionCount(address, hexBlockNumber).then(setTransactionCount);\n    erpc.eth_getBalance(address, hexBlockNumber).then(setBalance);\n    erpc.eth_getCode(address, hexBlockNumber).then(setCode);\n  }, [blockNumber, address, erpc]);\n\n  if (transactionCount === undefined || balance === undefined || code === undefined) {\n    return <CircularProgress />;\n  }\n  return (\n    <>\n      <AddressView\n        address={address}\n        txCount={transactionCount ? hexToNumber(transactionCount) : 0}\n        balance={unit.fromWei(balance || 0, \"ether\")}\n        code={code}\n      />\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\n\nimport { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\nimport hexToNumber from \"../../helpers/hexToNumber\";\n\nexport interface ITxListProps {\n  transactions: any[];\n}\n\nfunction TxListItem({ tx }: { tx: any }) {\n  return (\n    <TableRow>\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/tx/${tx.hash}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.hash}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/address/${tx.from}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.from}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        {tx.to !== null ?\n          <Link\n            component={({ className, children }: { children: any, className: string }) => (\n              <RouterLink className={className} to={`/address/${tx.to}`} >\n                {children}\n              </RouterLink>\n            )}>\n            {tx.to}\n          </Link>\n          : null}\n      </TableCell>\n\n      <TableCell>{hexToNumber(tx.transactionIndex)}</TableCell>\n    </TableRow>\n  );\n}\n\nfunction TxList(props: ITxListProps) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Hash</TableCell>\n          <TableCell>From</TableCell>\n          <TableCell>To</TableCell>\n          <TableCell>Index</TableCell>\n        </TableRow>\n      </TableHead>\n\n      <TableBody>\n        {props.transactions.map((tx: any) => <TxListItem key={tx.hash} tx={tx} />)}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default TxList;\n","import TxList from \"./TxList\";\nexport default TxList;\n","import moment from \"moment\";\n\nconst hexToDate = (hexTimestamp: string) => {\n  return moment(\n    new Date(parseInt(hexTimestamp, 16) * 1000).toISOString(),\n  ).format(\"MMMM Do YYYY, h:mm:ss a\");\n};\n\nexport default hexToDate;\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport TxList from \"../TxList\";\nimport hexToDate from \"../../helpers/hexToDate\";\nimport hexToNumber from \"../../helpers/hexToNumber\";\nimport hexToString from \"../../helpers/hexToString\";\n\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\n\nfunction BlockView(props: any) {\n  const { block } = props;\n\n  if (!block) {\n    return (<div>Loading...</div>);\n  }\n\n  const {\n    timestamp, hash, parentHash, miner, nonce, difficulty,\n    extraData, stateRoot, transactionsRoot, receiptsRoot, transactions,\n  } = block;\n\n  return (\n    <div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Number</TableCell>\n            <TableCell>{hexToNumber(block.number)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Timestamp</TableCell>\n            <TableCell>{hexToDate(timestamp)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Hash</TableCell>\n            <TableCell>{hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>ParentHash</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${parentHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {parentHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Miner</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${miner}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {miner}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Nonce</TableCell>\n            <TableCell>{hexToNumber(nonce)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Difficulty</TableCell>\n            <TableCell>{hexToNumber(difficulty)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Extra Data</TableCell>\n            <TableCell>{hexToString(extraData)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>State Root</TableCell>\n            <TableCell>{stateRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Transaction Root</TableCell>\n            <TableCell>{transactionsRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Receipts Root</TableCell>\n            <TableCell>{receiptsRoot}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <TxList transactions={transactions} />\n    </div>\n  );\n}\n\nexport default BlockView;\n","import BlockView from \"./BlockView\";\nexport default BlockView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport BlockView from \"../components/BlockView\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function Block(props: any) {\n  const { match: { params: { hash } } } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [block, setBlock] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getBlockByHash(hash, true).then(setBlock);\n  }, [hash, erpc]);\n  if (!block) { return (<CircularProgress />); }\n  return (<BlockView block={block} />);\n}\n","import BigNumber from \"bignumber.js\";\n\nexport function hashesToGH(hashes: BigNumber) {\n  return parseInt((hashes.dividedBy(1000000000).toNumber()).toFixed(2), 10);\n}\n\nexport function weiToGwei(wei: any) {\n  if (wei === 0) {\n    return wei;\n  }\n\n  return wei / 1000000000;\n}\n","import HashRate from \"./HashRate\";\nexport default HashRate;\n","import BigNumber from \"bignumber.js\";\nimport { hashesToGH } from \"../formatters\";\n\nexport default function HashRate(props: any) {\n  const { block, blockTime } = props;\n  return props.children(hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(blockTime)));\n}\n","import { grey } from \"@material-ui/core/colors\";\nimport { Theme } from \"@material-ui/core\";\n\nconst sansSerif = \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\";\n\nconst baseLabelStyles = {\n  fontFamily: sansSerif,\n  fontSize: 12,\n  letterSpacing: \"normal\",\n  padding: 10,\n  fill: grey[400],\n  stroke: \"transparent\",\n  strokeWidth: 0,\n};\n\nconst centeredLabelStyles = {\n  ...baseLabelStyles,\n  textAnchor: \"middle\",\n};\n\nconst getTheme = (theme: Theme) => ({\n  axis: {\n    style: {\n      axis: {\n        stroke: grey[400],\n        strokeWidth: 2,\n      },\n      axisLabel: {\n        ...centeredLabelStyles,\n      },\n      grid: {\n        stroke: \"none\",\n      },\n      ticks: {\n        stroke: grey[400],\n      },\n      tickLabels: {\n        padding: 5,\n        fill: grey[400],\n        strokeWidth: 1,\n      },\n    },\n  },\n  line: {\n    style: {\n      data: {\n        stroke: theme.palette.primary.main,\n        strokeWidth: 2,\n      },\n      labels: {\n        ...baseLabelStyles,\n      },\n    },\n  },\n  bar: {\n    style: {\n      data: {\n        fill: theme.palette.primary.main,\n        stroke: theme.palette.primary.main,\n      },\n      labels: {\n        ...baseLabelStyles,\n      },\n    },\n  },\n});\n\nexport default getTheme;\n","import * as React from \"react\";\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\n\ninterface IProps {\n  children: any;\n  title: string;\n}\n\nconst ChartCard: React.FC<IProps> = (props) => {\n  return (\n    <Card style={{background: \"transparent\"}}>\n      <CardContent>\n        <Typography variant=\"h6\">{props.title}</Typography>\n        {props.children}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ChartCard;\n","import BlockCard from \"./BlockCard\";\nexport default BlockCard;\n","import * as React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { Card, CardHeader, CardContent, Typography, Chip } from \"@material-ui/core\";\nimport hexToDate from \"../../helpers/hexToDate\";\nimport hexToString from \"../../helpers/hexToString\";\nimport hexToNumber from \"../../helpers/hexToNumber\";\nimport { GetBlockByNumberResult as IBlock } from \"@etclabscore/ethereum-json-rpc\";\n\ninterface IProps {\n  block: IBlock;\n}\n\nexport default function BlockCard(props: IProps) {\n  const { block } = props;\n\n  if (!block) {\n    return null;\n  }\n\n  return (\n    <Link\n      component={({ className, children }: { children: any, className: string }) => (\n        <RouterLink className={className} to={`/block/${block.hash}`} >\n          {children}\n        </RouterLink>\n      )}>\n      <Card elevation={1}>\n        <CardHeader title={hexToNumber(block.number!)}>\n        </CardHeader>\n        <CardContent>\n          <Typography variant=\"caption\" style={{ fontSize: \"11px\" }}>{block.hash}</Typography>\n          <Typography gutterBottom>{hexToDate(block.timestamp!)}</Typography>\n          <Typography gutterBottom>{hexToString(block.extraData!)}</Typography>\n          <Chip label={`${block.transactions!.length} Transactions`}>\n          </Chip>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","import { CircularProgress, Grid } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport getBlocks from \"../helpers\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport BlockCard from \"../components/BlockCard\";\nimport hexToNumber from \"../helpers/hexToNumber\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  style?: any;\n}\n\nexport default function BlockCardListContainer(props: IProps) {\n  const { from, to, style } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blocks, setBlocks] = React.useState([]);\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then(setBlocks);\n  }, [from, to, erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <Grid container spacing={2} style={style}>\n      {\n        blocks.sort((a: any, b: any) => {\n          return hexToNumber(b.number) - hexToNumber(a.number);\n        }).map((block: any) => {\n          return (\n            <Grid item xs={12} sm={4}>\n              <BlockCard block={block} />\n            </Grid>\n          );\n        })\n      }\n    </Grid>\n  );\n}\n","import { Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport hexToDate from \"../../helpers/hexToDate\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst rightPaddingFix = {\n  paddingRight: \"24px\",\n};\n\nfunction BlockList({ blocks }: any) {\n  if (!blocks) {\n    return null;\n  }\n  const sortedBlocks = blocks.sort((a: { number: number }, b: { number: number }) => {\n    return b.number - a.number;\n  });\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell><Typography>Block Number</Typography></TableCell>\n          <TableCell><Typography>Hash</Typography></TableCell>\n          <TableCell><Typography>Timestamp</Typography></TableCell>\n          <TableCell><Typography>Transactions</Typography></TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {sortedBlocks.map((b: any) => {\n          return (\n            <TableRow key={b.number}>\n              <TableCell component=\"th\" scope=\"row\"><Typography>{parseInt(b.number, 16)}</Typography></TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${b.hash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {b.hash}\n                </Link>\n              </TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Typography>{hexToDate(b.timestamp)}</Typography>\n              </TableCell>\n              <TableCell style={rightPaddingFix}>\n                <Typography>{b.transactions.length}</Typography>\n              </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default BlockList;\n","import BlockList from \"./BlockList\";\nexport default BlockList;\n","import { CircularProgress } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport BlockList from \"../components/BlockList\";\nimport getBlocks from \"../helpers\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  style?: any;\n}\n\nexport default function BlockListContainer(props: IProps) {\n  const { from, to, style } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blocks, setBlocks] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then(setBlocks);\n  }, [from, to, erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <div style={style}>\n      <BlockList blocks={blocks} />\n    </div>\n  );\n}\n","import { Grid, Typography, CircularProgress, Theme } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport BigNumber from \"bignumber.js\";\nimport * as React from \"react\";\nimport { VictoryBar, VictoryChart, VictoryLine } from \"victory\";\nimport { hashesToGH, weiToGwei } from \"../components/formatters\";\nimport HashRate from \"../components/HashRate\";\nimport getBlocks, { useBlockNumber } from \"../helpers\";\nimport useInterval from \"use-interval\";\nimport { useTheme } from \"@material-ui/styles\";\nimport getTheme from \"../themes/victoryTheme\";\nimport ChartCard from \"../components/ChartCard\";\nimport BlockCardListContainer from \"./BlockCardList\";\nimport BlockListContainer from \"./BlockList\";\nimport hexToNumber from \"../helpers/hexToNumber\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nconst useState = React.useState;\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\n\nconst blockMapGasUsed = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: new BigNumber(block.gasUsed).dividedBy(1000000),\n  };\n};\n\nconst blockMapUncles = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: block.uncles.length,\n  };\n};\n\nconst blockMapHashRate = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(config.blockTime)),\n  };\n};\n\nconst blockMapTransactionCount = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: block.transactions.length,\n  };\n};\n\nconst getStyles = () => {\n  return {\n    topItems: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n    },\n  };\n};\n\nexport default (props: any) => {\n  const styles = getStyles();\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const theme = useTheme<Theme>();\n  const victoryTheme = getTheme(theme);\n  const [blockNumber] = useBlockNumber(erpc);\n  const [chainId, setChainId] = useState();\n  const [block, setBlock] = useState();\n  const [blocks, setBlocks] = useState();\n  const [gasPrice, setGasPrice] = useState();\n  const [syncing, setSyncing] = useState();\n  const [peerCount, setPeerCount] = useState();\n  const [pendingTransctionsLength, setPendingTransactionsLength] = useState(0);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_pendingTransactions().then((p) => setPendingTransactionsLength(p.length));\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_chainId().then(setChainId);\n  }, [chainId, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === undefined) { return; }\n    erpc.eth_getBlockByNumber(`0x${blockNumber.toString(16)}`, true).then(setBlock);\n  }, [blockNumber, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === null) { return; }\n    getBlocks(\n      Math.max(blockNumber - config.blockHistoryLength + 1, 0),\n      blockNumber,\n      erpc,\n    ).then((bl) => {\n      setBlocks(bl);\n    });\n  }, [blockNumber, erpc]);\n\n  useInterval(() => {\n    if (!erpc) { return; }\n\n    erpc.eth_syncing().then(setSyncing);\n  }, 10000, true);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.net_peerCount().then(setPeerCount);\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_gasPrice().then(setGasPrice);\n  }, [erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <div>\n      <Grid container={true} spacing={3}>\n        <Grid style={styles.topItems} item={true} xs={12}>\n          <div key=\"blockHeight\">\n            <ChartCard title=\"Block Height\">\n              <Typography variant=\"h3\">{blockNumber}</Typography>\n            </ChartCard>\n          </div>\n          <div key=\"chainId\">\n            <ChartCard title=\"Chain ID\">\n              <Typography variant=\"h3\">{hexToNumber(chainId)}</Typography>\n            </ChartCard>\n          </div>\n          <div key=\"syncing\">\n            <ChartCard title=\"Syncing\">\n              {typeof syncing === \"object\" && syncing.currentBlock &&\n                <Typography variant=\"h3\">\n                  {hexToNumber(syncing.currentBlock)} / {hexToNumber(syncing.highestBlock || \"0x0\")}\n                </Typography>\n              }\n              {!syncing && <Typography variant=\"h3\">No</Typography>}\n            </ChartCard>\n          </div>\n          <div key=\"gasPrice\">\n            <ChartCard title=\"Gas Price\">\n              <Typography variant=\"h3\">{weiToGwei(hexToNumber(gasPrice))} Gwei</Typography>\n            </ChartCard>\n          </div>\n          <div key=\"hRate\">\n            <ChartCard title=\"Network Hash Rate\">\n              {block &&\n                <HashRate block={block} blockTime={config.blockTime}>\n                  {(hashRate: any) => <Typography variant=\"h3\">{hashRate} GH/s</Typography>}\n                </HashRate>\n              }\n            </ChartCard>\n          </div>\n          <div key=\"pending-tx\">\n            <ChartCard title=\"Pending Transactions\">\n              {<Typography variant=\"h3\">{pendingTransctionsLength}</Typography>}\n            </ChartCard>\n          </div>\n          <div>\n            <ChartCard title=\"Peers\">\n              <Typography variant=\"h3\">{hexToNumber(peerCount)}</Typography>\n            </ChartCard>\n          </div>\n        </Grid>\n        <Grid key=\"hashChart\" item={true} xs={12} sm={6} lg={3}>\n          <ChartCard title={`Hash Rate last ${blocks.length} blocks`}>\n            <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n              <VictoryLine data={blocks.map(blockMapHashRate)} />\n            </VictoryChart>\n          </ChartCard>\n        </Grid>\n        <Grid key=\"txChart\" item={true} xs={12} sm={6} lg={3}>\n          <ChartCard title={`Transaction count last ${blocks.length} blocks`}>\n            <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n              <VictoryBar data={blocks.map(blockMapTransactionCount)} />\n            </VictoryChart>\n          </ChartCard>\n        </Grid>\n        <Grid key=\"gasUsed\" item={true} xs={12} sm={6} lg={3}>\n          <ChartCard title={`Gas Used Last ${blocks.length} blocks`}>\n            <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n              <VictoryBar data={blocks.map(blockMapGasUsed)} />\n            </VictoryChart>\n          </ChartCard>\n        </Grid>\n        <Grid key=\"uncles\" item={true} xs={12} sm={6} lg={3}>\n          <ChartCard title={`Uncles Last ${blocks.length} blocks`}>\n            <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n              <VictoryBar data={blocks.map(blockMapUncles)} />\n            </VictoryChart>\n          </ChartCard>\n        </Grid>\n\n      </Grid>\n\n      <BlockCardListContainer from={Math.max(blockNumber - 3, 0)} to={blockNumber} />\n      <BlockListContainer from={Math.max((blockNumber - 3) - 11, 0)} to={blockNumber - 3} style={{marginTop: \"30px\"}} />\n\n    </div>\n  );\n};\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport { useBlockNumber } from \"../helpers\";\nimport BlockList from \"./BlockList\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function NodeView(props: any) {\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  if (!blockNumber) {\n    return (<CircularProgress />);\n  }\n  return (\n    <BlockList from={Math.max(blockNumber - 15, 0)} to={blockNumber}/>\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\nimport hexToNumber from \"../../helpers/hexToNumber\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport interface ITxViewProps {\n  tx: any;\n  receipt: any | null;\n}\n\nfunction renderTxTable(tx: any, receipt: any | null) {\n  return (\n    <div>\n      <div>General</div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Hash</TableCell>\n            <TableCell>{tx.hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Block</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${tx.blockHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.blockHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Block number</TableCell>\n            <TableCell>{hexToNumber(tx.blockNumber)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Gas</TableCell>\n            <TableCell>{hexToNumber(tx.gas)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Gas Price</TableCell>\n            <TableCell>{hexToNumber(tx.gasPrice)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Value</TableCell>\n            <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>From</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${tx.from}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.from}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>To</TableCell>\n            <TableCell>\n              {tx.to !== null ?\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${tx.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {tx.to}\n                </Link>\n                : null\n              }\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Nonce</TableCell>\n            <TableCell>{hexToNumber(tx.nonce)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Transaction Index</TableCell>\n            <TableCell>{hexToNumber(tx.transactionIndex)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>Input</TableCell>\n            <TableCell>{tx.input}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>v</TableCell>\n            <TableCell>{tx.v}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>r</TableCell>\n            <TableCell>{tx.r}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>s</TableCell>\n            <TableCell>{tx.s}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <div>Receipt</div>\n      {receipt &&\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Hash</TableCell>\n              <TableCell>{receipt.transactionHash}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Block</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${receipt.blockHash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.blockHash}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Block number</TableCell>\n              <TableCell>{hexToNumber(receipt.blockNumber)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Gas Used</TableCell>\n              <TableCell>{hexToNumber(receipt.gasUsed)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Cumulative Gas Used</TableCell>\n              <TableCell>{hexToNumber(receipt.cumulativeGasUsed)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Value</TableCell>\n              <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>From</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.from}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.from}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>To</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.to}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Contract Address</TableCell>\n              <TableCell>{receipt.contractAddress}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Transaction Index</TableCell>\n              <TableCell>{hexToNumber(receipt.transactionIndex)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Status</TableCell>\n              <TableCell>{receipt.status}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Logs</TableCell>\n              <TableCell>\n                {receipt.logs.length}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      }\n    </div>\n  );\n}\n\nfunction TxView(props: ITxViewProps) {\n  const { tx, receipt } = props;\n  if (!tx) {\n    return null;\n  }\n\n  return renderTxTable(tx, receipt);\n}\n\nexport default TxView;\n","import TxView from \"./TxView\";\nexport default TxView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport TxView from \"../components/TxView\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function TransactionContainer(props: any) {\n  const hash = props.match.params.hash;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [transaction, setTransaction] = React.useState();\n  const [receipt, setReceipt] = React.useState();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionByHash(hash).then(setTransaction);\n  }, [hash, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionReceipt(hash).then(setReceipt);\n  }, [hash, erpc]);\n\n  if (!transaction || !receipt) {\n    return (<CircularProgress />);\n  }\n\n  return (<TxView tx={transaction} receipt={receipt} />);\n}\n","import * as React from \"react\";\nimport { IconButton, Menu, MenuItem, ListItemText, ListItemSecondaryAction, Input, ListItemIcon, Tooltip } from \"@material-ui/core\"; //tslint:disable-line\nimport { NavigateNext, NavigateBefore } from \"@material-ui/icons\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\ninterface IConfigurationMenuProps {\n  onChange: (type: string, url: string) => any;\n}\n\ninterface IPagedMenuProps {\n  onChange: (type: string, url: string) => any;\n}\n\nconst PagedMenu: React.FC<IPagedMenuProps> = (props) => {\n  const [selected, setSelected] = React.useState<\"service-runner\" | \"ethereum-rpc\" | null>(null);\n  const nameMap = {\n    \"service-runner\": \"Service Runner RPC\",\n    \"ethereum-rpc\": \"Ethereum RPC\",\n  };\n\n  if (selected) {\n    return (\n      <>\n        <MenuItem onClick={() => setSelected(null)}>\n          <ListItemIcon>\n            <NavigateBefore />\n          </ListItemIcon>\n          <ListItemText>\n            Back\n          </ListItemText>\n        </MenuItem>\n        <Input\n          onChange={(e) => props.onChange(selected, e.currentTarget.value)}\n          placeholder={`${nameMap[selected]} Url`}\n          fullWidth={true}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MenuItem onClick={() => setSelected(\"service-runner\")}>\n        <ListItemText>\n          Service Runner RPC\n          </ListItemText>\n        <ListItemSecondaryAction>\n          <NavigateNext />\n        </ListItemSecondaryAction>\n      </MenuItem>\n      <MenuItem onClick={() => setSelected(\"ethereum-rpc\")}>\n        <ListItemText>\n          Ethereum RPC\n          </ListItemText>\n        <ListItemSecondaryAction>\n          <NavigateNext />\n        </ListItemSecondaryAction>\n      </MenuItem>\n    </>\n  );\n\n};\n\nconst ConfigurationMenu: React.FC<IConfigurationMenuProps> = (props) => {\n  const [anchorEl, setAnchorEl] = React.useState<any>(null);\n  const open = !!anchorEl;\n\n  function handleMenu(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  return (\n    <>\n      <Tooltip title=\"Configuration\">\n        <IconButton\n          aria-label=\"Configuration\"\n          aria-controls=\"menu-appbar\"\n          aria-haspopup=\"true\"\n          onClick={handleMenu}\n          color=\"inherit\"\n        >\n          <SettingsIcon color=\"action\"/>\n        </IconButton>\n      </Tooltip>\n      <Menu\n        id=\"menu-appbar\"\n        getContentAnchorEl={null}\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        PaperProps={{\n          style: {\n            width: \"250px\",\n          },\n        }}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n        onClose={handleClose}\n      >\n        <PagedMenu onChange={props.onChange}></PagedMenu>\n      </Menu>\n    </>\n  );\n};\n\nexport default ConfigurationMenu;\n","import ConfigurationMenu from \"./ConfigurationMenu\";\nexport default ConfigurationMenu;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import { AppBar, CssBaseline, Theme, Toolbar, Typography, IconButton, Grid, InputBase, Tooltip } from \"@material-ui/core\"; //tslint:disable-line\nimport { makeStyles, ThemeProvider } from \"@material-ui/styles\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport React, { Dispatch, ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport useDarkMode from \"use-dark-mode\";\nimport \"./App.css\";\nimport Address from \"./containers/Address\";\nimport Block from \"./containers/Block\";\nimport Dashboard from \"./containers/Dashboard\";\nimport NodeView from \"./containers/NodeView\";\nimport Transaction from \"./containers/Transaction\";\nimport ConfigurationMenu from \"./containers/ConfigurationMenu\";\nimport { darkTheme, lightTheme } from \"./themes/jadeTheme\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport NotesIcon from \"@material-ui/icons/Notes\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport CodeIcon from \"@material-ui/icons/Code\";\n\nimport useInterval from \"use-interval\";\nimport useServiceRunnerStore from \"./stores/useServiceRunnerStore\";\nimport useMultiGethStore from \"./stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport ETHJSONSpec from \"@etclabscore/ethereum-json-rpc-specification/openrpc.json\";\n\nimport createHistory from \"history/createBrowserHistory\";\nconst history = createHistory();\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  title: {\n  },\n}));\n\nfunction App(props: any) {\n  const darkMode = useDarkMode();\n  const [search, setSearch] = useState();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n\n  const [, , setServiceRunnerUrl] = useServiceRunnerStore();\n  const [erpc, setMultiGethUrlOverride]: [EthereumJSONRPC, Dispatch<string>] = useMultiGethStore();\n\n  const classes = useStyles(theme);\n  const handleConfigurationChange = (type: string, url: string) => {\n    if (type === \"service-runner\") {\n      setServiceRunnerUrl(url);\n    } else if (type === \"ethereum-rpc\") {\n      setMultiGethUrlOverride(url);\n    }\n  };\n\n  React.useEffect(() => {\n    if (erpc) {\n      erpc.startBatch();\n    }\n  }, [erpc]);\n\n  useInterval(() => {\n    if (erpc) {\n      erpc.stopBatch();\n      erpc.startBatch();\n    }\n  }, 100, true);\n\n  const isAddress = (query: string): boolean => {\n    const re = new RegExp(ETHJSONSpec.components.schemas.Address.pattern);\n    return re.test(query);\n  };\n\n  const isKeccakHash = (query: string): boolean => {\n    const re = new RegExp(ETHJSONSpec.components.schemas.Keccak.pattern);\n    return re.test(query);\n  };\n\n  const isBlockNumber = (query: string): boolean => {\n    const re = new RegExp(/^-{0,1}\\d+$/);\n    return re.test(query);\n  };\n\n  const handleSearch = async (query: string) => {\n    if (isAddress(query)) {\n      history.push(`/address/${query}`);\n    }\n    if (isKeccakHash(query)) {\n      let transaction;\n\n      try {\n        transaction = await erpc.eth_getTransactionByHash(query);\n      } catch (e) {\n        // do nothing\n      }\n\n      if (transaction) {\n        history.push(`/tx/${query}`);\n      }\n      let block;\n      try {\n        block = await erpc.eth_getBlockByHash(query, false);\n      } catch (e) {\n        // do nothing\n      }\n      if (block) {\n        history.push(`/block/${query}`);\n      }\n    }\n    if (isBlockNumber(query)) {\n      const block = await erpc.eth_getBlockByNumber(`0x${parseInt(query, 10).toString(16)}`, false);\n      if (block) {\n        history.push(`/block/${block.hash}`);\n      }\n    }\n  };\n\n  return (\n    <Router history={history}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppBar position=\"static\" color=\"default\" elevation={0}>\n          <Toolbar>\n            <Grid justify=\"space-between\" alignItems=\"center\" alignContent=\"center\" container>\n              <Grid item style={{ marginTop: \"8px\" }} direction=\"row\">\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={\"/\"}>\n                      {children}\n                    </RouterLink>\n                  )}>\n                  <Grid container>\n                    <Grid>\n                      {darkMode.value ?\n                        <img\n                          alt=\"jade-explorer\"\n                          height=\"30\"\n                          style={{ marginRight: \"5px\" }}\n                          src=\"https://github.com/etclabscore/jade-media-assets/blob/master/jade-logo-dark/jade-logo-dark%20(PNG)/32x32.png?raw=true\" //tslint:disable-line\n                        />\n                        :\n                        <img\n                          alt=\"jade-explorer\"\n                          height=\"30\"\n                          style={{ marginRight: \"5px\" }}\n                          src=\"https://github.com/etclabscore/jade-media-assets/blob/master/jade-logo-light/jade-logo-light%20(PNG)/32x32.png?raw=true\" //tslint:disable-line\n                        />\n                      }\n                    </Grid>\n                    <Grid>\n                      <Typography className={classes.title} color=\"textSecondary\" variant=\"h6\">Jade Explorer</Typography>\n                    </Grid>\n                  </Grid>\n                </Link>\n              </Grid>\n              <Grid item xs={7}>\n                <InputBase\n                  placeholder=\"Enter an Address, Transaction Hash or Block Number\"\n                  onKeyDown={\n                    (event: KeyboardEvent<HTMLInputElement>) => {\n                      if (event.keyCode === 13) {\n                        handleSearch(search.trim());\n                      }\n                    }\n                  }\n                  onChange={\n                    (event: ChangeEvent<HTMLInputElement>) => {\n                      setSearch(event.target.value);\n                    }\n                  }\n                  fullWidth\n                  style={{ background: \"rgba(0,0,0,0.1)\", borderRadius: \"4px\", padding: \"0px 10px\", marginRight: \"5px\" }}\n                />\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"JSOSN-RPC API Documentation\">\n                  <IconButton\n                    onClick={() =>\n                      window.open(\"https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/etclabscore/ethereum-json-rpc-specification/master/openrpc.json\")\n                    }>\n                    <NotesIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Jade Explorer Github\">\n                  <IconButton\n                    onClick={() =>\n                      window.open(\"https://github.com/etclabscore/jade-explorer\")\n                    }>\n                    <CodeIcon />\n                  </IconButton>\n                </Tooltip>\n                <ConfigurationMenu onChange={handleConfigurationChange} />\n                <Tooltip title=\"Toggle Dark Mode\">\n                  <IconButton onClick={darkMode.toggle}>\n                    {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </Toolbar>\n        </AppBar>\n        <div style={{ margin: \"0px 25px 0px 25px\" }}>\n          <Switch>\n            <Route path={\"/\"} component={Dashboard} exact={true} />\n            <Route path={\"/block/:hash\"} component={Block} />\n            <Route path={\"/blocks\"} component={NodeView} />\n            <Route path={\"/tx/:hash\"} component={Transaction} />\n            <Route path={\"/address/:address\"} component={Address} />\n          </Switch>\n        </div>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ReusableProvider } from \"reusable\";\n\nReactDOM.render(\n  <ReusableProvider>\n    <App />\n  </ReusableProvider>,\n  document.getElementById(\"root\") as HTMLElement,\n);\n"],"sourceRoot":""}