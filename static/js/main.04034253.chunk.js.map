{"version":3,"sources":["components/AddressView/AddressView.tsx","components/AddressView/index.ts","helpers.tsx","hooks/useMultiGeth.ts","hooks/useServiceRunner.ts","stores/useServiceRunnerStore.ts","stores/useMultiGethStore.ts","containers/Address.tsx","components/TxList/TxList.tsx","components/TxList/index.ts","components/BlockView/BlockView.tsx","components/BlockView/index.ts","containers/Block.tsx","components/formatters.ts","components/HashRate/index.ts","components/HashRate/HashRate.tsx","themes/victoryTheme.ts","components/ChartCard.tsx","components/BlockCard/index.ts","components/BlockCard/BlockCard.tsx","containers/BlockCardList.tsx","components/BlockList/BlockList.tsx","components/BlockList/index.ts","containers/BlockList.tsx","containers/Dashboard.tsx","containers/NodeView.tsx","components/TxView/TxView.tsx","components/TxView/index.ts","containers/Transaction.tsx","containers/ConfigurationMenu/ConfigurationMenu.tsx","containers/ConfigurationMenu/index.ts","themes/jadeTheme.ts","helpers/availableServiceToNetwork.ts","i18n.ts","translations/en.ts","translations/kr.ts","translations/cn.ts","containers/LanguageMenu/index.tsx","containers/LanguageMenu/LanguageMenu.tsx","components/NetworkDropdown/NetworkDropdown.tsx","helpers/createPreserveHistory.ts","App.tsx","index.tsx"],"names":["AddressView","props","address","balance","txCount","code","t","useTranslation","Card","CardContent","Typography","variant","useBlockNumber","erpc","React","blockNumber","setBlockNumber","useInterval","eth_blockNumber","then","bn","hexToNumber","getBlocks","from","to","promises","i","push","eth_getBlockByNumber","toString","Promise","all","serviceName","useMultiGeth","serviceRunner","serviceRunnerUrl","version","env","queryUrlOverride","useState","setErpc","process","REACT_APP_ETH_RPC_URL","urlOverride","setUrlOverride","useEffect","a","installService","startService","parsedUrl","URL","protocol","split","fallbackPort","port","parseInt","rpc","ERPC","transport","host","hostname","type","path","pathname","runAsync","requestManager","close","useServiceRunner","defaultUrl","url","setUrl","setServiceRunner","availableServices","setAvailableServices","e","JadeServiceRunner","listServices","createStore","useServiceRunnerStore","useQueryParam","StringParam","networkQuery","rpcUrlQuery","unit","require","Address","match","params","useMultiGethStore","transactionCount","setTransactionCount","setBalance","setCode","undefined","hexBlockNumber","eth_getTransactionCount","eth_getBalance","eth_getCode","CircularProgress","fromWei","TxListItem","tx","TableRow","TableCell","Link","component","className","children","hash","transactionIndex","TxList","Table","TableHead","TableBody","transactions","map","key","BlockView","block","timestamp","parentHash","miner","nonce","difficulty","extraData","stateRoot","transactionsRoot","receiptsRoot","number","date","hexToDate","hexToString","Block","setBlock","eth_getBlockByHash","hashesToGH","hashes","dividedBy","toNumber","toFixed","HashRate","blockTime","BigNumber","baseLabelStyles","fontFamily","fontSize","letterSpacing","padding","fill","grey","stroke","strokeWidth","centeredLabelStyles","textAnchor","getTheme","theme","axis","style","axisLabel","grid","ticks","tickLabels","line","data","palette","primary","main","labels","bar","ChartCard","background","elevation","title","BlockCard","CardHeader","gutterBottom","Chip","label","length","BlockCardListContainer","blocks","setBlocks","isSubscribed","bs","Grid","container","spacing","sort","b","item","xs","sm","rightPaddingFix","paddingRight","BlockList","sortedBlocks","width","overflowX","scope","BlockListContainer","justify","IconButton","onClick","onPrev","disabled","disablePrev","ArrowBackIos","onNext","disableNext","ArrowForwardIos","config","blockMapGasUsed","x","y","gasUsed","blockMapUncles","uncles","blockMapHashRate","blockMapTransactionCount","wei","useTheme","victoryTheme","chainId","setChainId","gasPrice","setGasPrice","syncing","setSyncing","peerCount","setPeerCount","pendingTransctionsLength","setPendingTransactionsLength","eth_pendingTransactions","p","eth_chainId","Math","max","bl","eth_syncing","net_peerCount","eth_gasPrice","direction","currentBlock","highestBlock","hashRate","md","lg","count","height","history","marginTop","NodeView","urlParams","useParams","blockNum","newQuery","TxView","receipt","blockHash","gas","value","input","v","r","s","transactionHash","cumulativeGasUsed","contractAddress","status","logs","renderTxTable","TransactionContainer","transaction","setTransaction","setReceipt","eth_getTransactionByHash","eth_getTransactionReceipt","PagedMenu","selected","setSelected","nameMap","MenuItem","ListItemIcon","NavigateBefore","ListItemText","Input","onChange","currentTarget","placeholder","fullWidth","ListItemSecondaryAction","NavigateNext","ConfigurationMenu","anchorEl","setAnchorEl","open","Tooltip","aria-label","aria-controls","aria-haspopup","event","color","Menu","id","getContentAnchorEl","keepMounted","PaperProps","anchorOrigin","vertical","horizontal","transformOrigin","onClose","lightTheme","responsiveFontSizes","createMuiTheme","MuiAppBar","position","MuiCard","overrides","root","default","darkTheme","paper","MuiTable","MuiTypography","availableServiceToNetwork","availNetworks","availableService","environments","name","service","summary","concat","momentMap","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translation","kr","cn","interpolation","escapeValue","format","lng","ln","moment","locale","reverseSupportedLanguages","supportedLanguages","LanguageMenu","Button","language","Boolean","Object","values","lang","changeLanguage","handleMenuItemClick","NetworkDropdown","selectedNetwork","setSelectedNetwork","networks","network","preserveQueryParameters","preserve","location","currentQuery","queryString","parse","window","search","preservedQuery","assign","stringify","createLocationDescriptorObject","state","createHistory","queryParameters","createBrowserHistory","options","oldPush","oldReplace","replace","apply","App","darkMode","useDarkMode","setSearch","setSelectedNetworkState","setServiceRunnerUrl","setMultiGethUrlOverride","setNetworks","useQueryParams","rpcUrl","query","setQuery","n","foundNetwork","find","net","startBatch","stopBatch","isAddress","q","RegExp","ETHJSONSpec","components","schemas","pattern","test","isKeccakHash","Keccak","isBlockNumber","handleSearch","ThemeProvider","AppBar","Toolbar","alignItems","alignContent","alt","marginRight","src","InputBase","onKeyDown","keyCode","trim","target","borderRadius","toggle","margin","ReactRouterRoute","Route","CssBaseline","Dashboard","exact","Transaction","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.04034253.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface IAddressViewProps {\n  address: string;\n  balance: string;\n  txCount: number;\n  code: string;\n}\n\nfunction AddressView(props: IAddressViewProps) {\n  const { address, balance, txCount, code } = props;\n  const { t } = useTranslation();\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\">{t(\"Address\")}: {address}</Typography>\n        <Typography variant=\"h6\">{t(\"Balance\")}: {balance}</Typography>\n        <Typography variant=\"h6\">{t(\"Transactions\")}: {txCount}</Typography>\n        <br />\n        <div>\n          <div>{t(\"Code\")}</div>\n          <pre>\n            <code>{code}</code>\n          </pre>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default AddressView;\n","import AddressView from \"./AddressView\";\nexport default AddressView;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport * as React from \"react\";\nimport useInterval from \"use-interval\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\n\nexport const getBlocks = (from: number, to: number, erpc: ERPC): Promise<any> => {\n  const promises: any[] = [];\n\n  for (let i = from; i <= to; i++) {\n    promises.push(erpc.eth_getBlockByNumber(`0x${i.toString(16)}`, true));\n  }\n  return Promise.all(promises);\n};\n\nexport const useBlockNumber = (erpc: ERPC | undefined) => {\n  const [blockNumber, setBlockNumber] = React.useState();\n  useInterval(() => {\n    if (!erpc) {\n      return;\n    }\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(hexToNumber(bn));\n    });\n  }, 7000, true);\n  React.useEffect(() => {\n    if (erpc) {\n      erpc.eth_blockNumber().then((bn: string) => {\n        setBlockNumber(hexToNumber(bn));\n      });\n    }\n  }, [erpc]);\n  return [blockNumber];\n};\n\nexport default getBlocks;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport React, { useState, Dispatch } from \"react\";\n\nconst serviceName = \"multi-geth\";\n\nfunction useMultiGeth(\n  serviceRunner: JadeServiceRunner | undefined,\n  serviceRunnerUrl: string,\n  version: string,\n  env: string,\n  queryUrlOverride?: string,\n): [ERPC | undefined, Dispatch<string>] {\n  const [erpc, setErpc] = React.useState<undefined | ERPC>();\n  const [urlOverride, setUrlOverride] = useState(process.env.REACT_APP_ETH_RPC_URL);\n  React.useEffect(() => {\n    if (!serviceRunner) {\n      return;\n    }\n    const runAsync = async () => {\n      if (!queryUrlOverride) {\n        const installed = await serviceRunner.installService(serviceName, version);\n        if (!installed) {\n          return;\n        }\n        await serviceRunner.startService(serviceName, version, env);\n      }\n      let parsedUrl;\n      try {\n        parsedUrl = new URL(queryUrlOverride || urlOverride || `${serviceRunnerUrl}/${serviceName}/${env}/${version}`);\n      } catch (e) {\n        return;\n      }\n      let rpc;\n      try {\n        const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n        const fallbackPort = protocol === \"http\" ? 80 : 443;\n        const port = parseInt(parsedUrl.port, 10);\n        rpc = new ERPC({\n          transport: {\n            host: parsedUrl.hostname,\n            port: port ? port : fallbackPort,\n            type: protocol,\n            path: parsedUrl.pathname,\n          },\n        });\n      } catch (e) {\n        return;\n      }\n      if (rpc) {\n        setErpc(rpc);\n      }\n    };\n    runAsync();\n    return () => {\n      if (erpc) {\n        erpc.rpc.requestManager.close();\n      }\n    };\n // eslint-disable-next-line react-hooks/exhaustive-deps\n }, [serviceRunner, serviceRunnerUrl, version, env, urlOverride, queryUrlOverride]);\n  return [erpc, setUrlOverride];\n}\n\nexport default useMultiGeth;\n","import JadeServiceRunner, { ObjectT84Ta8SE as IAvailableServices } from \"@etclabscore/jade-service-runner-client\";\nimport React, { Dispatch, useEffect } from \"react\";\n\nfunction useServiceRunner(defaultUrl: string): [JadeServiceRunner | undefined, string, Dispatch<string>, IAvailableServices[]] { //tslint:disable-line\n  const [url, setUrl] = React.useState(defaultUrl);\n  const [serviceRunner, setServiceRunner] = React.useState<JadeServiceRunner | undefined>();\n  const [availableServices, setAvailableServices] = React.useState<IAvailableServices[]>([]);\n  React.useEffect(() => {\n    if (!url) {\n      return;\n    }\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (e) {\n      return;\n    }\n    let rpc;\n    try {\n      const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n      const fallbackPort = protocol === \"http\" ? 80 : 443;\n      const port = parseInt(parsedUrl.port, 10);\n      rpc = new JadeServiceRunner({\n        transport: {\n          host: parsedUrl.hostname,\n          port: port ? port : fallbackPort,\n          type: protocol,\n        },\n      });\n    } catch (e) {\n      return;\n    }\n    if (rpc) {\n      setServiceRunner(rpc);\n    }\n    return () => {\n      if (serviceRunner) {\n        serviceRunner.rpc.requestManager.close();\n      }\n    };\n // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n  useEffect(() => {\n    if (serviceRunner) {\n      serviceRunner.listServices(\"available\").then(setAvailableServices);\n    }\n  }, [serviceRunner]);\n  return [serviceRunner, url, setUrl, availableServices];\n}\n\nexport default useServiceRunner;\n","import { createStore } from \"reusable\";\nimport useServiceRunner from \"../hooks/useServiceRunner\";\nexport default createStore(() => useServiceRunner(process.env.REACT_APP_SERVICE_RUNNER_URL || \"http://localhost:8002\"));\n","import { createStore } from \"reusable\";\nimport useMultiGeth from \"../hooks/useMultiGeth\";\nimport useServiceRunnerStore from \"./useServiceRunnerStore\";\nimport { useQueryParam, StringParam } from \"use-query-params\";\n\nexport default createStore(() => {\n  const [serviceRunner, serviceRunnerUrl] = useServiceRunnerStore();\n  const [networkQuery] = useQueryParam(\"network\", StringParam);\n  const [rpcUrlQuery] = useQueryParam(\"rpcUrl\", StringParam);\n  return useMultiGeth(serviceRunner, serviceRunnerUrl, \"1.9.2\", networkQuery || \"mainnet\", rpcUrlQuery);\n});\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport AddressView from \"../components/AddressView\";\nimport { useBlockNumber } from \"../helpers\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport default function Address({ match }: { match: { params: { address: string } } }) {\n  const { address } = match.params;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  const [transactionCount, setTransactionCount] = React.useState();\n  const [balance, setBalance] = React.useState();\n  const [code, setCode] = React.useState();\n\n  React.useEffect(() => {\n    if (blockNumber === undefined || !erpc) {\n      return;\n    }\n    const hexBlockNumber = `0x${blockNumber.toString(16)}`;\n    erpc.eth_getTransactionCount(address, hexBlockNumber).then(setTransactionCount);\n    erpc.eth_getBalance(address, hexBlockNumber).then(setBalance);\n    erpc.eth_getCode(address, hexBlockNumber).then(setCode);\n  }, [blockNumber, address, erpc]);\n\n  if (transactionCount === undefined || balance === undefined || code === undefined) {\n    return <CircularProgress />;\n  }\n  return (\n    <>\n      <AddressView\n        address={address}\n        txCount={transactionCount ? hexToNumber(transactionCount) : 0}\n        balance={unit.fromWei(balance || 0, \"ether\")}\n        code={code}\n      />\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\n\nimport { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\n\nexport interface ITxListProps {\n  transactions: any[];\n}\n\nfunction TxListItem({ tx }: { tx: any }) {\n  return (\n    <TableRow>\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/tx/${tx.hash}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.hash}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/address/${tx.from}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.from}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        {tx.to !== null ?\n          <Link\n            component={({ className, children }: { children: any, className: string }) => (\n              <RouterLink className={className} to={`/address/${tx.to}`} >\n                {children}\n              </RouterLink>\n            )}>\n            {tx.to}\n          </Link>\n          : null}\n      </TableCell>\n\n      <TableCell>{hexToNumber(tx.transactionIndex)}</TableCell>\n    </TableRow>\n  );\n}\n\nfunction TxList(props: ITxListProps) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Hash</TableCell>\n          <TableCell>From</TableCell>\n          <TableCell>To</TableCell>\n          <TableCell>Index</TableCell>\n        </TableRow>\n      </TableHead>\n\n      <TableBody>\n        {props.transactions.map((tx: any) => <TxListItem key={tx.hash} tx={tx} />)}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default TxList;\n","import TxList from \"./TxList\";\nexport default TxList;\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport TxList from \"../TxList\";\nimport { hexToDate, hexToString, hexToNumber } from \"@etclabscore/eserialize\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\n\nfunction BlockView(props: any) {\n  const { block } = props;\n  const { t } = useTranslation();\n\n  if (!block) {\n    return (<div>Loading...</div>);\n  }\n\n  const {\n    timestamp, hash, parentHash, miner, nonce, difficulty,\n    extraData, stateRoot, transactionsRoot, receiptsRoot, transactions,\n  } = block;\n\n  return (\n    <div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>{t(\"Number\")}</TableCell>\n            <TableCell>{hexToNumber(block.number)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Timestamp\")}</TableCell>\n            <TableCell>{t(\"Timestamp Date\", { date: hexToDate(timestamp)})}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Hash\")}</TableCell>\n            <TableCell>{hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"ParentHash\")}</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${parentHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {parentHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Miner\")}</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${miner}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {miner}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Nonce\")}</TableCell>\n            <TableCell>{hexToNumber(nonce)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Difficulty\")}</TableCell>\n            <TableCell>{hexToNumber(difficulty)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Extra Data\")}</TableCell>\n            <TableCell>{hexToString(extraData)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"State Root\")}</TableCell>\n            <TableCell>{stateRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Transaction Root\")}</TableCell>\n            <TableCell>{transactionsRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Receipts Root\")}</TableCell>\n            <TableCell>{receiptsRoot}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <TxList transactions={transactions} />\n    </div>\n  );\n}\n\nexport default BlockView;\n","import BlockView from \"./BlockView\";\nexport default BlockView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport BlockView from \"../components/BlockView\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function Block(props: any) {\n  const { match: { params: { hash } } } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [block, setBlock] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getBlockByHash(hash, true).then(setBlock);\n  }, [hash, erpc]);\n  if (!block) { return (<CircularProgress />); }\n  return (<BlockView block={block} />);\n}\n","import BigNumber from \"bignumber.js\";\n\nexport function hashesToGH(hashes: BigNumber) {\n  return parseInt((hashes.dividedBy(1000000000).toNumber()).toFixed(2), 10);\n}\n\nexport function weiToGwei(wei: any) {\n  if (wei === 0) {\n    return wei;\n  }\n\n  return wei / 1000000000;\n}\n","import HashRate from \"./HashRate\";\nexport default HashRate;\n","import BigNumber from \"bignumber.js\";\nimport { hashesToGH } from \"../formatters\";\n\nexport default function HashRate(props: any) {\n  const { block, blockTime } = props;\n  return props.children(hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(blockTime)));\n}\n","import { grey } from \"@material-ui/core/colors\";\nimport { Theme } from \"@material-ui/core\";\n\nconst sansSerif = \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\";\n\nconst baseLabelStyles = {\n  fontFamily: sansSerif,\n  fontSize: 12,\n  letterSpacing: \"normal\",\n  padding: 10,\n  fill: grey[400],\n  stroke: \"transparent\",\n  strokeWidth: 0,\n};\n\nconst centeredLabelStyles = {\n  ...baseLabelStyles,\n  textAnchor: \"middle\",\n};\n\nconst getTheme = (theme: Theme) => ({\n  axis: {\n    style: {\n      axis: {\n        stroke: grey[400],\n        strokeWidth: 2,\n      },\n      axisLabel: {\n        ...centeredLabelStyles,\n      },\n      grid: {\n        stroke: \"none\",\n      },\n      ticks: {\n        stroke: grey[400],\n      },\n      tickLabels: {\n        padding: 5,\n        fill: grey[400],\n        strokeWidth: 1,\n      },\n    },\n  },\n  line: {\n    style: {\n      data: {\n        stroke: theme.palette.primary.main,\n        strokeWidth: 2,\n      },\n      labels: {\n        ...baseLabelStyles,\n      },\n    },\n  },\n  bar: {\n    style: {\n      data: {\n        fill: theme.palette.primary.main,\n        stroke: theme.palette.primary.main,\n      },\n      labels: {\n        ...baseLabelStyles,\n      },\n    },\n  },\n});\n\nexport default getTheme;\n","import * as React from \"react\";\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\n\ninterface IProps {\n  children: any;\n  title: string;\n}\n\nconst ChartCard: React.FC<IProps> = (props) => {\n  return (\n    <Card style={{background: \"transparent\"}} elevation={0}>\n      <CardContent>\n        <Typography variant=\"h6\">{props.title}</Typography>\n        {props.children}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ChartCard;\n","import BlockCard from \"./BlockCard\";\nexport default BlockCard;\n","import * as React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { Card, CardHeader, CardContent, Typography, Chip } from \"@material-ui/core\";\nimport { hexToDate, hexToString, hexToNumber } from \"@etclabscore/eserialize\";\nimport { GetBlockByNumberResult as IBlock } from \"@etclabscore/ethereum-json-rpc\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n  block: IBlock;\n}\n\nexport default function BlockCard(props: IProps) {\n  const { block } = props;\n  const { t } = useTranslation();\n\n  if (!block) {\n    return null;\n  }\n\n  return (\n    <Link\n      component={({ className, children }: { children: any, className: string }) => (\n        <RouterLink className={className} to={`/block/${block.hash}`} >\n          {children}\n        </RouterLink>\n      )}>\n      <Card elevation={1}>\n        <CardHeader title={hexToNumber(block.number!)}>\n        </CardHeader>\n        <CardContent>\n          <Typography variant=\"caption\" style={{ fontSize: \"11px\" }}>{block.hash}</Typography>\n          <Typography gutterBottom>{t(\"Timestamp Date\", { date: hexToDate(block.timestamp!) })}</Typography>\n          <Typography gutterBottom>{hexToString(block.extraData!)}</Typography>\n          <Chip label={`${block.transactions!.length} Transactions`}>\n          </Chip>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","import { CircularProgress, Grid } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport getBlocks from \"../helpers\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport BlockCard from \"../components/BlockCard\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  style?: any;\n}\n\nexport default function BlockCardListContainer(props: IProps) {\n  const { from, to, style } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blocks, setBlocks] = React.useState();\n  React.useEffect(() => {\n    let isSubscribed = true;\n    if (!erpc) { return; }\n    if (isSubscribed) {\n      getBlocks(from, to, erpc).then((bs) => {\n        setBlocks(bs);\n      });\n    }\n    return () => {\n      isSubscribed = false;\n      return;\n    };\n // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [from, to]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <Grid container spacing={2} style={style}>\n      {\n        blocks.sort((a: any, b: any) => {\n          return hexToNumber(b.number) - hexToNumber(a.number);\n        }).map((block: any) => {\n          return (\n            <Grid item xs={12} sm={4} key={block.hash}>\n              <BlockCard block={block} />\n            </Grid>\n          );\n        })\n      }\n    </Grid>\n  );\n}\n","import { Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { hexToDate } from \"@etclabscore/eserialize\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst rightPaddingFix = {\n  paddingRight: \"24px\",\n};\n\nfunction BlockList({ blocks }: any) {\n  const { t } = useTranslation();\n  if (!blocks) {\n    return null;\n  }\n  const sortedBlocks = blocks.sort((a: { number: number }, b: { number: number }) => {\n    return b.number - a.number;\n  });\n  return (\n    <div style={{ width: \"100%\", overflowX: \"auto\" }}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell><Typography>{t(\"Block Number\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Hash\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Timestamp\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Transactions\")}</Typography></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {sortedBlocks.map((b: any) => {\n            return (\n              <TableRow key={b.number}>\n                <TableCell component=\"th\" scope=\"row\"><Typography>{parseInt(b.number, 16)}</Typography></TableCell>\n                <TableCell style={rightPaddingFix}>\n                  <Link\n                    component={({ className, children }: { children: any, className: string }) => (\n                      <RouterLink className={className} to={`/block/${b.hash}`} >\n                        {children}\n                      </RouterLink>\n                    )}>\n                    {b.hash}\n                  </Link>\n                </TableCell>\n                <TableCell style={rightPaddingFix}>\n                  <Typography>{t(\"Timestamp Date\", { date: hexToDate(b.timestamp)})}</Typography>\n                </TableCell>\n                <TableCell style={rightPaddingFix}>\n                  <Typography>{b.transactions.length}</Typography>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n\n  );\n}\n\nexport default BlockList;\n","import BlockList from \"./BlockList\";\nexport default BlockList;\n","import { CircularProgress, Grid, IconButton } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport * as React from \"react\";\nimport BlockList from \"../components/BlockList\";\nimport getBlocks from \"../helpers\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport { ArrowForwardIos, ArrowBackIos } from \"@material-ui/icons\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  disablePrev: boolean;\n  disableNext: boolean;\n  style?: any;\n  onNext?: any;\n  onPrev?: any;\n}\n\nexport default function BlockListContainer(props: IProps) {\n  const { from, to, style } = props;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blocks, setBlocks] = React.useState();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then(setBlocks);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [from, to]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <div style={style}>\n      <Grid container justify=\"flex-end\">\n        <IconButton onClick={props.onPrev} disabled={props.disablePrev}>\n          <ArrowBackIos />\n        </IconButton>\n        <IconButton onClick={props.onNext} disabled={props.disableNext}>\n          <ArrowForwardIos />\n        </IconButton>\n      </Grid>\n      <BlockList blocks={blocks} />\n    </div>\n  );\n}\n","import { Grid, Typography, CircularProgress, Theme } from \"@material-ui/core\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport BigNumber from \"bignumber.js\";\nimport * as React from \"react\";\nimport { VictoryBar, VictoryChart, VictoryLine } from \"victory\";\nimport { hashesToGH, weiToGwei } from \"../components/formatters\";\nimport HashRate from \"../components/HashRate\";\nimport getBlocks, { useBlockNumber } from \"../helpers\";\nimport useInterval from \"use-interval\";\nimport { useTheme } from \"@material-ui/styles\";\nimport getTheme from \"../themes/victoryTheme\";\nimport ChartCard from \"../components/ChartCard\";\nimport BlockCardListContainer from \"./BlockCardList\";\nimport BlockListContainer from \"./BlockList\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport { useTranslation } from \"react-i18next\";\n\nconst useState = React.useState;\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\n\nconst blockMapGasUsed = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: new BigNumber(block.gasUsed).dividedBy(1000000),\n  };\n};\n\nconst blockMapUncles = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: block.uncles.length,\n  };\n};\n\nconst blockMapHashRate = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(config.blockTime)),\n  };\n};\n\nconst blockMapTransactionCount = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: block.transactions.length,\n  };\n};\n\nexport default (props: any) => {\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const theme = useTheme<Theme>();\n  const victoryTheme = getTheme(theme);\n  const [blockNumber] = useBlockNumber(erpc);\n  const [chainId, setChainId] = useState();\n  const [block, setBlock] = useState();\n  const [blocks, setBlocks] = useState();\n  const [gasPrice, setGasPrice] = useState();\n  const [syncing, setSyncing] = useState();\n  const [peerCount, setPeerCount] = useState();\n\n  const [pendingTransctionsLength, setPendingTransactionsLength] = useState(0);\n  const { t } = useTranslation();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_pendingTransactions().then((p) => setPendingTransactionsLength(p.length));\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_chainId().then(setChainId);\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === undefined) { return; }\n    erpc.eth_getBlockByNumber(`0x${blockNumber.toString(16)}`, true).then(setBlock);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [blockNumber]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === null) { return; }\n    getBlocks(\n      Math.max(blockNumber - config.blockHistoryLength + 1, 0),\n      blockNumber,\n      erpc,\n    ).then((bl) => {\n      setBlocks(bl);\n    });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [blockNumber]);\n\n  useInterval(() => {\n    if (!erpc) { return; }\n\n    erpc.eth_syncing().then(setSyncing);\n  }, 10000, true);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.net_peerCount().then(setPeerCount);\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_gasPrice().then(setGasPrice);\n  }, [erpc]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <div>\n      <Grid container spacing={3} direction=\"column\">\n        <Grid item container justify=\"space-between\">\n          <Grid item key=\"blockHeight\">\n            <ChartCard title={t(\"Block Height\")}>\n              <Typography variant=\"h4\">{blockNumber}</Typography>\n            </ChartCard>\n          </Grid>\n          <Grid key=\"chainId\" item>\n            <ChartCard title={t(\"Chain ID\")}>\n              <Typography variant=\"h4\">{hexToNumber(chainId)}</Typography>\n            </ChartCard>\n          </Grid>\n          {syncing &&\n            <div key=\"syncing\">\n              <ChartCard title={t(\"Syncing\")}>\n                {typeof syncing === \"object\" && syncing.currentBlock &&\n                  <Typography variant=\"h4\">\n                    {hexToNumber(syncing.currentBlock)} / {hexToNumber(syncing.highestBlock || \"0x0\")}\n                  </Typography>\n                }\n              </ChartCard>\n            </div>\n          }\n          <Grid key=\"gasPrice\" item>\n            <ChartCard title={t(\"Gas Price\")}>\n              <Typography variant=\"h4\">{weiToGwei(hexToNumber(gasPrice))} Gwei</Typography>\n            </ChartCard>\n          </Grid>\n          <Grid key=\"hRate\" item>\n            <ChartCard title={t(\"Network Hash Rate\")}>\n              {block &&\n                <HashRate block={block} blockTime={config.blockTime}>\n                  {(hashRate: any) => <Typography variant=\"h4\">{hashRate} GH/s</Typography>}\n                </HashRate>\n              }\n            </ChartCard>\n          </Grid>\n          <Grid key=\"pending-tx\" item>\n            <ChartCard title={t(\"Pending Transactions\")}>\n              {<Typography variant=\"h4\">{pendingTransctionsLength}</Typography>}\n            </ChartCard>\n          </Grid>\n          <Grid key=\"peers\" item>\n            <ChartCard title={t(\"Peers\")}>\n              <Typography variant=\"h4\">{hexToNumber(peerCount)}</Typography>\n            </ChartCard>\n          </Grid>\n        </Grid>\n        <Grid item container>\n          <Grid key=\"hashChart\" item xs={12} md={6} lg={3}>\n            <ChartCard title={t(\"Hash Rate last blocks\", {count: config.blockHistoryLength})}>\n              <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n                <VictoryLine data={blocks.map(blockMapHashRate)} />\n              </VictoryChart>\n            </ChartCard>\n          </Grid>\n          <Grid key=\"txChart\" item xs={12} md={6} lg={3}>\n            <ChartCard title={t(\"Transaction count last blocks\", {count: config.blockHistoryLength})}>\n              <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n                <VictoryBar data={blocks.map(blockMapTransactionCount)} />\n              </VictoryChart>\n            </ChartCard>\n          </Grid>\n          <Grid key=\"gasUsed\" item xs={12} md={6} lg={3}>\n            <ChartCard title={t(\"Gas Used last blocks\", {count: config.blockHistoryLength})}>\n              <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n                <VictoryBar data={blocks.map(blockMapGasUsed)} />\n              </VictoryChart>\n            </ChartCard>\n          </Grid>\n          <Grid key=\"uncles\" item xs={12} md={6} lg={3}>\n            <ChartCard title={t(\"Uncles last blocks\", {count: config.blockHistoryLength})}>\n              <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n                <VictoryBar data={blocks.map(blockMapUncles)} />\n              </VictoryChart>\n            </ChartCard>\n          </Grid>\n        </Grid>\n\n      </Grid>\n\n      <BlockCardListContainer from={Math.max(blockNumber - 2, 0)} to={blockNumber} />\n      <BlockListContainer\n        from={Math.max((blockNumber - 3) - 11, 0)}\n        to={blockNumber - 3}\n        disablePrev={true}\n        disableNext={blockNumber === 0}\n        onNext={() => {\n          props.history.push(`/blocks/${blockNumber - 15}`);\n        }}\n        style={{ marginTop: \"30px\" }} />\n    </div>\n  );\n};\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport { useBlockNumber } from \"../helpers\";\nimport BlockList from \"./BlockList\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport { useParams } from \"react-router-dom\";\n\ninterface IUrlParams {\n  number: string | undefined;\n}\n\nexport default function NodeView(props: any) {\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  const urlParams = useParams<IUrlParams>();\n  const blockNum = (urlParams && urlParams.number !== undefined) ? urlParams.number : blockNumber;\n\n  React.useEffect(() => {\n    if (blockNum === undefined || blockNumber === undefined) {\n      return;\n    }\n    if (blockNum > blockNumber) {\n      props.history.push(`/blocks/${blockNumber}`);\n    }\n    if (blockNum < 0) {\n      props.history.push(\"/blocks/0\");\n    }\n  }, [blockNumber, blockNum, props.history]);\n  if (blockNumber === undefined || blockNum > blockNumber) {\n    return (<CircularProgress />);\n  }\n  return (\n    <BlockList\n      from={Math.max(blockNum - 14, 0)}\n      to={(urlParams.number !== undefined ? urlParams.number : blockNumber)}\n      disablePrev={blockNum >= blockNumber}\n      disableNext={blockNum === 0}\n      onPrev={() => {\n        const newQuery = blockNum + 15;\n        props.history.push(`/blocks/${newQuery}`);\n      }}\n      onNext={() => {\n        const newQuery = Math.max(blockNum - 15, 0);\n        props.history.push(`/blocks/${newQuery}`);\n      }}\n    />\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport { Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport { useTranslation } from \"react-i18next\";\nimport i18next from \"i18next\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport interface ITxViewProps {\n  tx: any;\n  receipt: any | null;\n}\n\nfunction renderTxTable(tx: any, receipt: any | null, t: i18next.TFunction) {\n  return (\n    <div>\n      <div>General</div>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>{t(\"Hash\")}</TableCell>\n            <TableCell>{tx.hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Block\")}</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${tx.blockHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.blockHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Block Number\")}</TableCell>\n            <TableCell>{hexToNumber(tx.blockNumber)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Gas\")}</TableCell>\n            <TableCell>{hexToNumber(tx.gas)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Gas Price\")}</TableCell>\n            <TableCell>{hexToNumber(tx.gasPrice)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Value\")}</TableCell>\n            <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"From\")}</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${tx.from}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.from}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"To\")}</TableCell>\n            <TableCell>\n              {tx.to !== null ?\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${tx.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {tx.to}\n                </Link>\n                : null\n              }\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Nonce\")}</TableCell>\n            <TableCell>{hexToNumber(tx.nonce)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Transaction Index\")}</TableCell>\n            <TableCell>{hexToNumber(tx.transactionIndex)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Input\")}</TableCell>\n            <TableCell>{tx.input}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>v</TableCell>\n            <TableCell>{tx.v}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>r</TableCell>\n            <TableCell>{tx.r}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>s</TableCell>\n            <TableCell>{tx.s}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <div>Receipt</div>\n      {receipt &&\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>{t(\"Hash\")}</TableCell>\n              <TableCell>{receipt.transactionHash}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Block\")}</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${receipt.blockHash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.blockHash}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Block Number\")}</TableCell>\n              <TableCell>{hexToNumber(receipt.blockNumber)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Gas Used\")}</TableCell>\n              <TableCell>{hexToNumber(receipt.gasUsed)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Cumulative Gas Used\")}</TableCell>\n              <TableCell>{hexToNumber(receipt.cumulativeGasUsed)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Value in Ether\")}</TableCell>\n              <TableCell>{unit.fromWei(tx.value, \"ether\")}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"From\")}</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.from}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.from}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"To\")}</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.to}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Contract Address\")}</TableCell>\n              <TableCell>{receipt.contractAddress}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Transaction Index\")}</TableCell>\n              <TableCell>{hexToNumber(receipt.transactionIndex)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Receipt Status\")}</TableCell>\n              <TableCell>{receipt.status}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Receipt Logs\")}</TableCell>\n              <TableCell>\n                {receipt.logs.length}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      }\n    </div>\n  );\n}\n\nfunction TxView(props: ITxViewProps) {\n  const { tx, receipt } = props;\n  const { t } = useTranslation();\n  if (!tx) {\n    return null;\n  }\n\n  return renderTxTable(tx, receipt, t);\n}\n\nexport default TxView;\n","import TxView from \"./TxView\";\nexport default TxView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport TxView from \"../components/TxView\";\nimport useMultiGethStore from \"../stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function TransactionContainer(props: any) {\n  const hash = props.match.params.hash;\n  const [erpc]: [EthereumJSONRPC] = useMultiGethStore();\n  const [transaction, setTransaction] = React.useState();\n  const [receipt, setReceipt] = React.useState();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionByHash(hash).then(setTransaction);\n  }, [hash, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionReceipt(hash).then(setReceipt);\n  }, [hash, erpc]);\n\n  if (!transaction || !receipt) {\n    return (<CircularProgress />);\n  }\n\n  return (<TxView tx={transaction} receipt={receipt} />);\n}\n","import * as React from \"react\";\nimport { IconButton, Menu, MenuItem, ListItemText, ListItemSecondaryAction, Input, ListItemIcon, Tooltip } from \"@material-ui/core\"; //tslint:disable-line\nimport { NavigateNext, NavigateBefore } from \"@material-ui/icons\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IConfigurationMenuProps {\n  onChange: (type: string, url: string) => any;\n}\n\ninterface IPagedMenuProps {\n  onChange: (type: string, url: string) => any;\n}\n\nconst PagedMenu: React.FC<IPagedMenuProps> = (props) => {\n  const [selected, setSelected] = React.useState<\"service-runner\" | \"ethereum-rpc\" | null>(null);\n  const { t } = useTranslation();\n  const nameMap = {\n    \"service-runner\": t(\"Service Runner RPC Url\"),\n    \"ethereum-rpc\": t(\"Ethereum RPC Url\"),\n  };\n\n  if (selected) {\n    return (\n      <>\n        <MenuItem onClick={() => setSelected(null)}>\n          <ListItemIcon>\n            <NavigateBefore />\n          </ListItemIcon>\n          <ListItemText>\n            {t(\"Back\")}\n          </ListItemText>\n        </MenuItem>\n        <Input\n          onChange={(e) => props.onChange(selected, e.currentTarget.value)}\n          placeholder={nameMap[selected]}\n          fullWidth={true}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MenuItem onClick={() => setSelected(\"service-runner\")}>\n        <ListItemText>\n          {t(\"Service Runner RPC\")}\n          </ListItemText>\n        <ListItemSecondaryAction>\n          <NavigateNext />\n        </ListItemSecondaryAction>\n      </MenuItem>\n      <MenuItem onClick={() => setSelected(\"ethereum-rpc\")}>\n        <ListItemText>\n          {t(\"Ethereum RPC\")}\n          </ListItemText>\n        <ListItemSecondaryAction>\n          <NavigateNext />\n        </ListItemSecondaryAction>\n      </MenuItem>\n    </>\n  );\n\n};\n\nconst ConfigurationMenu: React.FC<IConfigurationMenuProps> = (props) => {\n  const [anchorEl, setAnchorEl] = React.useState<any>(null);\n  const { t } = useTranslation();\n  const open = !!anchorEl;\n\n  function handleMenu(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  return (\n    <>\n      <Tooltip title={t(\"Configuration\")}>\n        <IconButton\n          aria-label=\"Configuration\"\n          aria-controls=\"menu-appbar\"\n          aria-haspopup=\"true\"\n          onClick={handleMenu}\n          color=\"inherit\"\n        >\n          <SettingsIcon color=\"action\"/>\n        </IconButton>\n      </Tooltip>\n      <Menu\n        id=\"menu-appbar\"\n        getContentAnchorEl={null}\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        PaperProps={{\n          style: {\n            width: \"250px\",\n          },\n        }}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n        onClose={handleClose}\n      >\n        <PagedMenu onChange={props.onChange}></PagedMenu>\n      </Menu>\n    </>\n  );\n};\n\nexport default ConfigurationMenu;\n","import ConfigurationMenu from \"./ConfigurationMenu\";\nexport default ConfigurationMenu;\n","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = responsiveFontSizes(createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n}));\n\nexport const darkTheme = responsiveFontSizes(createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n}));\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import { ObjectT84Ta8SE as IAvailableServices, ObjectDBzoJtf4 as IEnvironment } from \"@etclabscore/jade-service-runner-client\";\n\ninterface INetwork {\n  name: string;\n  url: string;\n  summary?: string;\n  [k: string]: any;\n}\n\nexport type TNetwork = INetwork;\n\nconst availableServiceToNetwork = (\n  availableServices: IAvailableServices[],\n  serviceRunnerUrl: string): TNetwork[] => {\n  const availNetworks = availableServices.map((availableService: IAvailableServices) => {\n    if (!availableService) {\n      return [];\n    }\n    if (!availableService.environments) {\n      return [];\n    }\n    return availableService.environments.map((env: IEnvironment) => {\n      return {\n        name: env.name,\n        url: `${serviceRunnerUrl}/${availableService.name}/${env.name}/${availableService.version}`,\n        service: availableService,\n        summary: env.summary,\n      };\n    });\n  });\n  return ([] as any).concat(...availNetworks);\n};\n\nexport default availableServiceToNetwork;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport enJSON from \"./translations/en\";\nimport krJSON from \"./translations/kr\";\nimport cnJSON from \"./translations/cn\";\nimport moment from \"moment\";\nimport \"moment/locale/ko\";\nimport \"moment/locale/zh-cn\";\nimport \"moment/locale/en-ca\";\nimport i18next from \"i18next\";\n\ninterface IMap {\n  [key: string]: string;\n}\n\nconst momentMap: IMap = {\n  \"kr\": \"ko\",\n  \"cn\": \"zh-cn\",\n  \"en-US\": \"en-ca\",\n};\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources: {\n      en: { translation: enJSON },\n      kr: { translation: krJSON },\n      cn: { translation: cnJSON },\n    },\n    interpolation: {\n      escapeValue: false,\n      format: (value, format, lng) => {\n        if (!lng) {\n          return;\n        }\n        if (format !== \"date\") {\n          return;\n        }\n        const ln = momentMap[lng];\n        const result = moment(value).locale(ln || \"en\").format(\"MMMM Do YYYY, h:mm:ss a\");\n        return result as any;\n      },\n    },\n  });\n\nexport const reverseSupportedLanguages: IMap = {\n  \"EN\": \"en-US\", //tslint:disable-line\n  \"中文\": \"cn\", //tslint:disable-line\n  \"한국어\": \"kr\", //tslint:disable-line\n};\n\nexport const supportedLanguages: IMap = {\n  \"en-US\": \"EN\",\n  \"cn\": \"中文\",\n  \"kr\": \"한국어\",\n};\n\nexport const changeLanguage = (l: string) => {\n  return i18next.changeLanguage(l);\n};\n","export default {\n  // Moment integration\n  \"Timestamp Date\": \"{{date, date}}\",\n  \"Explorer\": \"Explorer\",\n  \"Change Language\": \"Change Language\",\n  \"Enter an Address, Transaction Hash or Block Number\": \"🔎 Enter an Address, Transaction Hash or Block Number\",\n  \"JSON-RPC API Documentation\": \"JSON-RPC API Documentation\",\n  \"Jade Explorer Github\": \"Jade Explorer Github\",\n  \"Toggle Dark Mode\": \"Toggle Dark Mode\",\n  \"Block Height\": \"Block Height\",\n  \"Chain ID\": \"Chain ID\",\n  \"Syncing\": \"Syncing\",\n  \"Gas Price\": \"Gas Price\",\n  \"Network Hash Rate\": \"Network Hash Rate\",\n  \"Pending Transactions\": \"PendingTransactions\",\n  \"Peers\": \"Peers\",\n  \"Hash Rate last blocks\": \"Hash Rate last block\",\n  \"Hash Rate last blocks_plural\": \"Hash Rate last {{count}} blocks\",\n  \"Transaction count last blocks\": \"Transaction count last block\",\n  \"Transaction count last blocks_plural\": \"Transaction count last {{count}} blocks\",\n  \"Gas Used last blocks\": \"Gas Used last block\",\n  \"Gas Used last blocks_plural\": \"Gas Used last {{count}} blocks\",\n  \"Uncles last blocks\": \"Uncles last block\",\n  \"Uncles last blocks_plural\": \"Uncles last {{count}} blocks\",\n  \"Block Number\": \"Block Number\",\n  \"Hash\": \"Hash\",\n  \"Timestamp\": \"Timestamp\",\n  \"Transactions\": \"Transactions\",\n  \"Number\": \"Number\",\n  \"ParentHash\": \"ParentHash\",\n  \"Miner\": \"Miner\",\n  \"Nonce\": \"Nonce\",\n  \"Difficulty\": \"Difficulty\",\n  \"Extra Data\": \"Extra Data\",\n  \"State Root\": \"State Root\",\n  \"Transaction Root\": \"Transaction Root\",\n  \"Receipts Root\": \"Receipts Root\",\n  \"Block\": \"Block\",\n  \"Gas Used\": \"Gas Used\",\n  \"Cumulative Gas Used\": \"Cumulative Gas Used\",\n  \"Value in Ether\": \"Value in Ether\",\n  \"From\": \"From\",\n  \"To\": \"To\",\n  \"Contract Address\": \"Contract Address\",\n  \"Transaction Index\": \"Transaction Index\",\n  \"Receipt Status\": \"Receipt Status\",\n  \"Receipt Logs\": \"Receipt Logs\",\n  \"Address\": \"Address\",\n  \"Balance\": \"Balance\",\n  \"Code\": \"Code\",\n  \"Configuration\": \"Configuration\",\n  \"Back\": \"Back\",\n  \"Ethereum RPC\": \"Ethereum RPC\",\n  \"Service Runner RPC\": \"Service Runner RPC\",\n};\n","export default {\n  // Moment integration\n  \"Timestamp Date\": \"{{date, date}}\",\n  // App Bar\n  \"Explorer\": \"브라우저\",\n  \"Change Language\": \"언어 변경\",\n  \"Enter an Address, Transaction Hash or Block Number\": \"거래주소 해시값 혹은 블록번호 입력\",\n  \"JSON-RPC API Documentation\": \"JSON-RPC API 문서\",\n  \"Jade Explorer Github\": \"Jade Explorer Github\",\n  \"Toggle Dark Mode\": \"블랙모드 변경\",\n  // Dashboard\n  \"Block Height\": \"블록높이\",\n  \"Chain ID\": \"Chain ID\",\n  \"Syncing\": \"동기화\",\n  \"Gas Price\": \"Gas 비용\",\n  \"Network Hash Rate\": \"해시파워\",\n  \"Pending Transactions\": \"대기인 거래\",\n  \"Peers\": \"거점\",\n  \"Hash Rate last blocks\": \"이전 블록 해시파워\",\n  \"Hash Rate last blocks_plural\": \"{{count}}개 이전 블록 해시파워\",\n  \"Transaction count last blocks\": \"이전 블록 거래수량\",\n  \"Transaction count last blocks_plural\": \"{{count}}개 이전 블록 해시파워\",\n  \"Gas Used last blocks\": \"이전 블록 Gas소모\",\n  \"Gas Used last blocks_plural\": \"{{count}}개 이전 블록 Gas소모\",\n  \"Uncles last blocks\": \"이번 블록의 엉클블록\",\n  \"Uncles last blocks_plural\": \"{{count}}개 이전 블록의 엉클블록\",\n  // block list\n  \"Block Number\": \"블록번호\",\n  \"Hash\": \"해시\",\n  \"Timestamp\": \"타임 스탬프\",\n  \"Transactions\": \"거래\",\n  // block view\n  \"Number\": \"수량\",\n  \"ParentHash\": \"ParentHash\",\n  \"Miner\": \"마이너\",\n  \"Nonce\": \"목하\",\n  \"Difficulty\": \"난이도\",\n  \"Extra Data\": \"추가 데이터\",\n  \"State Root\": \"주 루트\",\n  \"Transaction Root\": \"거래 루트\",\n  \"Receipts Root\": \"영수 루트\",\n  // transaction view\n  \"Block\": \"블록\",\n  \"Gas Used\": \"Gas 소모\",\n  \"Cumulative Gas Used\": \"누적 Gas소모\",\n  \"Value in Ether\": \"Ether값\",\n  \"From\": \"부터\",\n  \"To\": \"으로\",\n  \"Contract Address\": \"계약주소\",\n  \"Transaction Index\": \"거래 인덱스\",\n  \"Receipt Status\": \"수신상태\",\n  \"Receipt Logs\": \"수신일지\",\n  // address view\n  \"Address\": \"주소\",\n  \"Balance\": \"잔액\",\n  \"Code\": \"코드\",\n  // configuration menu\n  \"Configuration\": \"구성\",\n  \"Back\": \"뒤로\",\n  \"Ethereum RPC\": \"Ethereum RPC\",\n  \"Service Runner RPC\": \"Service Runner RPC\",\n};\n","export default {\n  // Moment integration\n  \"Timestamp Date\": \"{{date, date}}\",\n  // App Bar\n  \"Explorer\": \"浏览器\",\n  \"Change Language\": \"更改语言\",\n  \"Enter an Address, Transaction Hash or Block Number\": \"输入地址 交易哈希或区块号\",\n  \"JSON-RPC API Documentation\": \"JSON-RPC API 文档\",\n  \"Jade Explorer Github\": \"Jade Explorer Github\",\n  \"Toggle Dark Mode\": \"切换黑暗模式\",\n  // Dashboard\n  \"Block Height\": \"区块高度\",\n  \"Chain ID\": \"Chain ID\",\n  \"Syncing\": \"同步中\",\n  \"Gas Price\": \"Gas 费用\",\n  \"Network Hash Rate\": \"算力\",\n  \"Pending Transactions\": \"等待中的交易\",\n  \"Peers\": \"端点\",\n  \"Hash Rate last blocks\": \"上个区块算力\",\n  \"Hash Rate last blocks_plural\": \"前{{count}}个区块算力\",\n  \"Transaction count last blocks\": \"上个区块交易数量\",\n  \"Transaction count last blocks_plural\": \"前 {{count}}个区块交易数量\",\n  \"Gas Used last blocks\": \"上个区块Gas消耗\",\n  \"Gas Used last blocks_plural\": \"前{{count}}个区块Gas消耗\",\n  \"Uncles last blocks\": \"上个区块叔块\",\n  \"Uncles last blocks_plural\": \"前{{count}}个区块叔块\",\n  // block list\n  \"Block Number\": \"区块编号\",\n  \"Hash\": \"哈希\",\n  \"Timestamp\": \"时间戳\",\n  \"Transactions\": \"交易\",\n  // block view\n  \"Number\": \"数量\",\n  \"ParentHash\": \"父哈希\",\n  \"Miner\": \"矿工\",\n  \"Nonce\": \"随机数\",\n  \"Difficulty\": \"难度\",\n  \"Extra Data\": \"额外数据\",\n  \"State Root\": \"状态根\",\n  \"Transaction Root\": \"交易根\",\n  \"Receipts Root\": \"接收根\",\n  // transaction view\n  \"Block\": \"区块\",\n  \"Gas Used\": \"Gas 消耗\",\n  \"Cumulative Gas Used\": \"累计Gas消耗\",\n  \"Value in Ether\": \"Ether值\",\n  \"From\": \"从\",\n  \"To\": \"到\",\n  \"Contract Address\": \"合约地址\",\n  \"Transaction Index\": \"交易索引\",\n  \"Receipt Status\": \"接收状态\",\n  \"Receipt Logs\": \"接收日志\",\n  // address view\n  \"Address\": \"地址\",\n  \"Balance\": \"余额\",\n  \"Code\": \"代码\",\n  // configuration menu\n  \"Configuration\": \"配置\",\n  \"Back\": \"返回\",\n  \"Ethereum RPC\": \"Ethereum RPC\",\n  \"Service Runner RPC\": \"Service Runner RPC\",\n};\n","import LanguageMenu from \"./LanguageMenu\";\nexport default LanguageMenu;\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { supportedLanguages, reverseSupportedLanguages } from \"../../i18n\";\n\nconst LanguageMenu: React.FC = (props) => {\n  const { t, i18n } = useTranslation();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (lang: string) => {\n    setAnchorEl(null);\n    // this forces language change for react + i18n react\n    i18n.changeLanguage(reverseSupportedLanguages[lang]);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Tooltip title={t(\"Change Language\")}>\n        <Button onClick={handleClick}>{supportedLanguages[i18n.language]}</Button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {Object.values(supportedLanguages).map((lang, i) => (\n          <MenuItem onClick={(event) => handleMenuItemClick(lang)}>{lang}</MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default LanguageMenu;\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button, Typography } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { TNetwork } from \"../../helpers/availableServiceToNetwork\";\n\ninterface IProps {\n  networks: TNetwork[];\n  selectedNetwork?: TNetwork;\n  setSelectedNetwork?: (network: TNetwork) => void;\n}\n\nconst NetworkDropdown: React.FC<IProps> = (props) => {\n  const { t } = useTranslation();\n  const { selectedNetwork, setSelectedNetwork } = props;\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (network: TNetwork) => {\n    setAnchorEl(null);\n    if (setSelectedNetwork) {\n      setSelectedNetwork(network);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n\n      <Tooltip title={t(\"Change Network\")}>\n        <Button onClick={handleClick}>\n          {selectedNetwork && selectedNetwork.name}\n        </Button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {props.networks.map((network, i) => (\n          <MenuItem\n            selected={selectedNetwork && selectedNetwork.name === network.name}\n            onClick={(event) => handleMenuItemClick(network)}\n          >\n            <div>\n              <Typography variant=\"body1\">{network.name}</Typography>\n              <Typography variant=\"caption\">{network.summary}</Typography>\n            </div>\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default NetworkDropdown;\n","import { History, LocationDescriptor, LocationDescriptorObject } from \"history\";\nimport queryString from \"query-string\";\n\ntype LocationState = History.LocationState;\n\ntype CreateHistory<O, H> = (options?: O) => History & H;\n\nfunction preserveQueryParameters(\n  history: History,\n  preserve: string[],\n  location: LocationDescriptorObject,\n): LocationDescriptorObject {\n  const currentQuery = queryString.parse(window.location.search);\n  if (currentQuery) {\n    const preservedQuery: { [key: string]: unknown } = {};\n    for (const p of preserve) {\n      const v = currentQuery[p];\n      if (v) {\n        preservedQuery[p] = v;\n      }\n    }\n    if (location.search) {\n      Object.assign(preservedQuery, queryString.parse(location.search));\n    }\n    location.search = queryString.stringify(preservedQuery);\n  }\n  return location;\n}\n\nfunction createLocationDescriptorObject(location: LocationDescriptor, state?: LocationState): LocationDescriptorObject {\n  return typeof location === \"string\" ? { pathname: location, state } : location;\n}\n\nexport function createPreserveQueryHistory<O, H>(\n  createHistory: CreateHistory<O, H>,\n  queryParameters: string[],\n): CreateHistory<O, H> {\n  return (options?: O) => {\n    const history = createHistory(options);\n    const oldPush = history.push;\n    const oldReplace = history.replace;\n    history.push = (path: LocationDescriptor, state?: LocationState) =>\n      oldPush.apply(history, [\n        preserveQueryParameters(history, queryParameters, createLocationDescriptorObject(path, state)),\n      ]);\n    history.replace = (path: LocationDescriptor, state?: LocationState) =>\n      oldReplace.apply(history, [\n        preserveQueryParameters(history, queryParameters, createLocationDescriptorObject(path, state)),\n      ]);\n    return history;\n  };\n}\n","import { AppBar, CssBaseline, Toolbar, Typography, IconButton, Grid, InputBase, Tooltip } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Link from \"@material-ui/core/Link\";\nimport { } from \"react-router-dom\";\nimport React, { Dispatch, ChangeEvent, KeyboardEvent, useState, useEffect } from \"react\";\nimport { Link as RouterLink, Router, Route, Switch } from \"react-router-dom\";\nimport useDarkMode from \"use-dark-mode\";\nimport \"./App.css\";\nimport Address from \"./containers/Address\";\nimport Block from \"./containers/Block\";\nimport Dashboard from \"./containers/Dashboard\";\nimport NodeView from \"./containers/NodeView\";\nimport Transaction from \"./containers/Transaction\";\nimport ConfigurationMenu from \"./containers/ConfigurationMenu\";\nimport { darkTheme, lightTheme } from \"./themes/jadeTheme\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport NotesIcon from \"@material-ui/icons/Notes\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport ServiceRunner, { ObjectT84Ta8SE as IAvailableServices } from \"@etclabscore/jade-service-runner-client\";\nimport availableServiceToNetwork from \"./helpers/availableServiceToNetwork\";\n\nimport useInterval from \"use-interval\";\nimport useServiceRunnerStore from \"./stores/useServiceRunnerStore\";\nimport useMultiGethStore from \"./stores/useMultiGethStore\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport ETHJSONSpec from \"@etclabscore/ethereum-json-rpc-specification/openrpc.json\";\nimport { useTranslation } from \"react-i18next\";\nimport LanguageMenu from \"./containers/LanguageMenu\";\nimport { createBrowserHistory } from \"history\";\nimport NetworkDropdown from \"./components/NetworkDropdown/NetworkDropdown\";\nimport { StringParam, QueryParamProvider, useQueryParams } from \"use-query-params\";\nimport { createPreserveQueryHistory } from \"./helpers/createPreserveHistory\";\n\nconst history = createPreserveQueryHistory(createBrowserHistory, [\"network\", \"rpcUrl\"])();\n\nfunction App(props: any) {\n  const { t } = useTranslation();\n  const darkMode = useDarkMode();\n  const [search, setSearch] = useState();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n\n  const [selectedNetwork, setSelectedNetworkState] = useState();\n  const [serviceRunner, serviceRunnerUrl, setServiceRunnerUrl, availableServices]: [ServiceRunner, string, any, IAvailableServices[]] = useServiceRunnerStore(); //tslint:disable-line\n  const [erpc, setMultiGethUrlOverride]: [EthereumJSONRPC, Dispatch<string>] = useMultiGethStore();\n  const [networks, setNetworks] = useState<any[]>([]);\n\n  const [query, setQuery] = useQueryParams({\n    network: StringParam,\n    rpcUrl: StringParam,\n  });\n\n  const setSelectedNetwork = async (network: any) => {\n    setSelectedNetworkState(network);\n    if (network.service) {\n      await serviceRunner.installService(network.service.name, network.service.version);\n      await serviceRunner.startService(network.service.name, network.service.version, network.name);\n    }\n    setMultiGethUrlOverride(network.url);\n    setQuery({ network: network.name });\n  };\n\n  useEffect(() => {\n    if (availableServices && serviceRunnerUrl) {\n      const n = availableServiceToNetwork(availableServices, serviceRunnerUrl);\n      setNetworks(n);\n    }\n  }, [availableServices, serviceRunnerUrl]);\n\n  useEffect(() => {\n    if (!networks || networks.length === 0) {\n      return;\n    }\n    if (query.rpcUrl) {\n      return;\n    }\n    if (networks && query.network) {\n      const foundNetwork = networks.find((net) => net.name === query.network);\n      setSelectedNetworkState(foundNetwork);\n    } else {\n      setSelectedNetworkState(networks[0]);\n      setQuery({ network: networks[0].name });\n    }\n  }, [query.network, query.rpcUrl, networks, setQuery]);\n\n  useEffect(() => {\n    if (selectedNetwork) {\n      setQuery({ network: selectedNetwork.name }, \"replaceIn\");\n    }\n  }, [selectedNetwork, setQuery]);\n\n  const handleConfigurationChange = (type: string, url: string) => {\n    if (type === \"service-runner\") {\n      setServiceRunnerUrl(url);\n    } else if (type === \"ethereum-rpc\") {\n      setMultiGethUrlOverride(url);\n    }\n  };\n\n  React.useEffect(() => {\n    if (erpc) {\n      erpc.startBatch();\n    }\n  }, [erpc]);\n\n  useInterval(() => {\n    if (erpc) {\n      erpc.stopBatch();\n      erpc.startBatch();\n    }\n  }, 100, true);\n\n  const isAddress = (q: string): boolean => {\n    const re = new RegExp(ETHJSONSpec.components.schemas.Address.pattern);\n    return re.test(q);\n  };\n\n  const isKeccakHash = (q: string): boolean => {\n    const re = new RegExp(ETHJSONSpec.components.schemas.Keccak.pattern);\n    return re.test(q);\n  };\n\n  const isBlockNumber = (q: string): boolean => {\n    const re = new RegExp(/^-{0,1}\\d+$/);\n    return re.test(q);\n  };\n\n  const handleSearch = async (q: string) => {\n    if (isAddress(q)) {\n      history.push(`/address/${q}`);\n    }\n    if (isKeccakHash(q)) {\n      let transaction;\n\n      try {\n        transaction = await erpc.eth_getTransactionByHash(q);\n      } catch (e) {\n        // do nothing\n      }\n\n      if (transaction) {\n        history.push(`/tx/${q}`);\n      }\n      let block;\n      try {\n        block = await erpc.eth_getBlockByHash(q, false);\n      } catch (e) {\n        // do nothing\n      }\n      if (block) {\n        history.push(`/block/${q}`);\n      }\n    }\n    if (isBlockNumber(q)) {\n      const block = await erpc.eth_getBlockByNumber(`0x${parseInt(q, 10).toString(16)}`, false);\n      if (block) {\n        history.push(`/block/${block.hash}`);\n      }\n    }\n  };\n\n  return (\n    <Router history={history}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"sticky\" color=\"default\" elevation={0}>\n          <Toolbar>\n            <Grid justify=\"space-between\" alignItems=\"center\" alignContent=\"center\" container>\n              <Grid item style={{ marginTop: \"8px\" }}>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={\"/\"}>\n                      {children}\n                    </RouterLink>\n                  )}>\n                  <Grid container>\n                    <Grid>\n                      {darkMode.value ?\n                        <img\n                          alt=\"jade-explorer\"\n                          height=\"30\"\n                          style={{ marginRight: \"5px\" }}\n                          src=\"https://github.com/etclabscore/jade-media-assets/blob/master/jade-logo-dark/jade-logo-dark%20(PNG)/32x32.png?raw=true\" //tslint:disable-line\n                        />\n                        :\n                        <img\n                          alt=\"jade-explorer\"\n                          height=\"30\"\n                          style={{ marginRight: \"5px\" }}\n                          src=\"https://github.com/etclabscore/jade-media-assets/blob/master/jade-logo-light/jade-logo-light%20(PNG)/32x32.png?raw=true\" //tslint:disable-line\n                        />\n                      }\n                    </Grid>\n                    <Grid>\n                      <Typography color=\"textSecondary\" variant=\"h6\">\n                        {t(\"Explorer\")}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Link>\n              </Grid>\n              <Grid item md={6} xs={12}>\n                <InputBase\n                  placeholder={t(\"Enter an Address, Transaction Hash or Block Number\")}\n                  onKeyDown={\n                    (event: KeyboardEvent<HTMLInputElement>) => {\n                      if (event.keyCode === 13) {\n                        handleSearch(search.trim());\n                      }\n                    }\n                  }\n                  onChange={\n                    (event: ChangeEvent<HTMLInputElement>) => {\n                      setSearch(event.target.value);\n                    }\n                  }\n                  fullWidth\n                  style={{\n                    background: \"rgba(0,0,0,0.1)\",\n                    borderRadius: \"4px\",\n                    padding: \"5px 10px 0px 10px\",\n                    marginRight: \"5px\",\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <NetworkDropdown\n                  networks={networks}\n                  setSelectedNetwork={setSelectedNetwork}\n                  selectedNetwork={selectedNetwork}\n                />\n                <LanguageMenu />\n                <Tooltip title={t(\"JSON-RPC API Documentation\")}>\n                  <IconButton\n                    onClick={() =>\n                      window.open(\"https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/etclabscore/ethereum-json-rpc-specification/master/openrpc.json\") //tslint:disable-line\n                    }>\n                    <NotesIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title={t(\"Jade Explorer Github\")}>\n                  <IconButton\n                    onClick={() =>\n                      window.open(\"https://github.com/etclabscore/jade-explorer\")\n                    }>\n                    <CodeIcon />\n                  </IconButton>\n                </Tooltip>\n                <ConfigurationMenu onChange={handleConfigurationChange} />\n                <Tooltip title={t(\"Toggle Dark Mode\")}>\n                  <IconButton onClick={darkMode.toggle}>\n                    {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </Toolbar>\n        </AppBar>\n        <div style={{ margin: \"0px 25px 0px 25px\" }}>\n          <QueryParamProvider ReactRouterRoute={Route}>\n            <CssBaseline />\n            <Switch>\n              <Route path={\"/\"} component={Dashboard} exact={true} />\n              <Route path={\"/block/:hash\"} component={Block} />\n              <Route path={\"/blocks/:number\"} component={NodeView} />\n              <Route path={\"/tx/:hash\"} component={Transaction} />\n              <Route path={\"/address/:address\"} component={Address} />\n            </Switch>\n          </QueryParamProvider>\n        </div>\n      </ThemeProvider >\n    </Router >\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { I18nextProvider } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport { ReusableProvider } from \"reusable\";\nimport \"./i18n\";\n\nReactDOM.render(\n  <I18nextProvider i18n={i18n}>\n    <ReusableProvider>\n      <App />\n    </ReusableProvider>\n  </I18nextProvider>,\n  document.getElementById(\"root\") as HTMLElement,\n);\n"],"sourceRoot":""}